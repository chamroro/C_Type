{"ast":null,"code":"var _jsxFileName = \"/Users/haeunkim/Desktop/project/typescript/SIRO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n  background-color: #2b2b2b;\n  min-height: 100vh;\n  color: #fff;\n`;\n_c = AppContainer;\nconst Title = styled.h1`\n  color: #fff;\n  margin-bottom: 2rem;\n`;\n_c2 = Title;\nconst TypingArea = styled.div`\n  margin-bottom: 2rem;\n  position: relative;\n  text-align: left;\n`;\n_c3 = TypingArea;\nconst TextContainer = styled.div`\n  position: relative;\n  font-size: 1.2rem;\n  line-height: 1.8;\n  font-family: monospace;\n`;\n_c4 = TextContainer;\nconst BaseText = styled.div`\n  white-space: pre-wrap;\n  color: #666;\n  position: relative;\n  z-index: 1;\n  min-height: 200px;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\nconst OverlayText = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  white-space: pre-wrap;\n  z-index: 2;\n  width: 100%;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\nconst Char = styled.span`\n  color: ${props => {\n  switch (props.status) {\n    case 'correct':\n      return '#fff';\n    case 'incorrect':\n      return '#ff4444';\n    case 'waiting':\n      return '#666';\n  }\n}};\n`;\n_c5 = Char;\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 4px;\n  background-color: #444;\n  margin-bottom: 1rem;\n  border-radius: 2px;\n`;\n_c6 = ProgressBar;\nconst Progress = styled.div`\n  width: ${props => props.width}%;\n  height: 100%;\n  background-color: ${props => props.width === 100 ? '#4CAF50' : '#666'};\n  border-radius: 2px;\n  transition: width 0.3s ease;\n`;\n_c7 = Progress;\nconst CompletionMessage = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.9);\n  padding: 2rem;\n  border-radius: 8px;\n  display: ${props => props.show ? 'block' : 'none'};\n  z-index: 100;\n  text-align: center;\n`;\n_c8 = CompletionMessage;\nconst HiddenInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  pointer-events: auto;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  cursor: text;\n`;\n_c9 = HiddenInput;\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 2px;\n  height: 1.4em;\n  background-color: #fff;\n  margin-left: -1px;\n  margin-right: 1px;\n  vertical-align: middle;\n  animation: blink 1s step-end infinite;\n  position: relative;\n  \n  @keyframes blink {\n    from, to {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0;\n    }\n  }\n`;\n_c10 = Cursor;\nconst poems = [{\n  title: '대화',\n  content: `사랑을 잃고 나는 쓰네\n잘 있거라, 짧았던 밤들아\n창밖을 떠돌던 겨울 안개들아\n아무것도 모르던 촛불들아, 잘 있거라\n공포를 기다리던 흰 종이들아\n말설임을 대신하던 눈물들아\n잘 있거라, 더 이상 내 것이 아닌 열망들아\n장님처럼 나 이제 더듬거리며 문을 잠그네\n가엾은 내 사랑 빈집에 갇혔네`\n}];\n\n// 한글 유니코드 범위 체크\nconst isKorean = char => {\n  const code = char.charCodeAt(0);\n  return code >= 0xAC00 && code <= 0xD7A3;\n};\n\n// 초성 검사\nconst isChoseong = char => {\n  const code = char.charCodeAt(0);\n  return code >= 0x3131 && code <= 0x314E;\n};\n\n// 초성 테이블\nconst CHOSEONG = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n// 한글 자모 분리\nconst decompose = char => {\n  const code = char.charCodeAt(0) - 0xAC00;\n  if (code < 0 || code > 11171) return null;\n  const jong = code % 28;\n  const jung = (code - jong) / 28 % 21;\n  const cho = ((code - jong) / 28 - jung) / 21;\n  return {\n    cho: Math.floor(cho),\n    jung: Math.floor(jung),\n    jong: Math.floor(jong)\n  };\n};\n\n// 현재 입력이 목표의 일부인지 확인 (로직 개선)\nconst isPartialMatch = (target, input) => {\n  // 한글이 아니면 정확히 일치해야 함\n  if (!isKorean(target)) return target === input;\n\n  // 완전히 일치하는 경우\n  if (target === input) return true;\n\n  // 초성만 입력된 경우 (예: 목표가 '사', 입력이 'ㅅ')\n  if (isChoseong(input)) {\n    const targetDecomp = decompose(target);\n    if (targetDecomp) {\n      return CHOSEONG[targetDecomp.cho] === input;\n    }\n  }\n\n  // 중성만 입력된 경우 (중성 검사 함수 직접 사용)\n  const isJungseong = char => {\n    const code = char.charCodeAt(0);\n    return code >= 0x314F && code <= 0x3163;\n  };\n  if (isJungseong(input)) {\n    return false; // 중성만 있는 경우는 일치하지 않음\n  }\n\n  // 종성까지 입력된 경우 (예: 목표가 '라', 입력이 '랄')\n  if (input.length === 1 && isKorean(input)) {\n    const inputDecomp = decompose(input);\n    const targetDecomp = decompose(target);\n    if (inputDecomp && targetDecomp) {\n      // 초성과 중성이 일치하면 부분 일치로 간주\n      return inputDecomp.cho === targetDecomp.cho && inputDecomp.jung === targetDecomp.jung;\n    }\n  }\n  return false;\n};\nconst App = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [completed, setCompleted] = useState(false);\n  const [composing, setComposing] = useState(false);\n  const [currentText, setCurrentText] = useState('');\n  const [debug, setDebug] = useState({\n    event: '',\n    data: ''\n  });\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [currentLine, setCurrentLine] = useState(0);\n  const inputRef = useRef(null);\n  const currentPoem = poems[0];\n\n  // 시를 줄 단위로 분할\n  const poemLines = currentPoem.content.split('\\n');\n  const calculateProgress = () => {\n    if (userInput.length === 0) return 0;\n    const correctChars = userInput.split('').filter((char, i) => char === currentPoem.content[i]).length;\n    return correctChars / currentPoem.content.length * 100;\n  };\n\n  // 현재 줄이 완성되었는지 확인하는 함수 (로그 완전 제거)\n  const checkLineCompletion = () => {\n    // 자동 줄바꿈 비활성화\n    return;\n  };\n\n  // 다음 줄로 이동하는 함수 (로그 제거 및 최적화)\n  const moveToNextLine = () => {\n    // 마지막 줄이면 처리하지 않음\n    if (currentLine >= poemLines.length - 1) return;\n\n    // 같은 줄을 다시 처리하지 않도록 행 번호 증가\n    const nextLine = currentLine + 1;\n\n    // 다음 줄의 시작 위치 계산\n    let nextLineStartPosition = 0;\n    for (let i = 0; i < nextLine; i++) {\n      nextLineStartPosition += poemLines[i].length;\n      if (i < nextLine - 1) nextLineStartPosition += 1; // 이전 줄들의 줄바꿈\n    }\n\n    // 줄바꿈이 이미 있는지 확인 (중복 추가 방지)\n    let updatedInput = userInput;\n    const expectedBreaks = currentLine;\n    const actualBreaks = (userInput.match(/\\n/g) || []).length;\n    if (actualBreaks < expectedBreaks + 1) {\n      // 줄바꿈이 없으면 추가 (중복 방지)\n      if (!updatedInput.endsWith('\\n')) {\n        updatedInput = userInput + '\\n';\n        setUserInput(updatedInput);\n        setCurrentText(updatedInput);\n      }\n    }\n\n    // 상태 업데이트 - 다음 줄로 이동\n    setCurrentLine(nextLine);\n\n    // 현재 입력 위치 업데이트 (+1은 줄바꿈)\n    const newPosition = nextLineStartPosition + (nextLine > 0 ? 1 : 0);\n    setCurrentPosition(newPosition);\n\n    // 포커스 유지\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  // useEffect 의존성 배열 수정\n  useEffect(() => {\n    // 조합 중일 때는 체크하지 않음\n    if (!composing) {\n      checkLineCompletion();\n    }\n  }, [userInput, composing, currentLine, poemLines]); // checkLineCompletion 제거\n\n  // 입력 처리 함수 (현재 줄 업데이트 포함)\n  const handleInput = e => {\n    var _e$currentTarget, _e$currentTarget$sele, _e$currentTarget2;\n    e.preventDefault();\n    const value = ((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.value) || '';\n    const selectionStart = (_e$currentTarget$sele = (_e$currentTarget2 = e.currentTarget) === null || _e$currentTarget2 === void 0 ? void 0 : _e$currentTarget2.selectionStart) !== null && _e$currentTarget$sele !== void 0 ? _e$currentTarget$sele : 0;\n\n    // 입력 시 현재 줄 계산\n    let lineIndex = 0;\n    let charCount = 0;\n    const lines = value.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      const lineLength = lines[i].length;\n      if (selectionStart >= charCount && selectionStart <= charCount + lineLength) {\n        lineIndex = i;\n        break;\n      }\n      charCount += lineLength + 1; // +1 for newline\n    }\n    setDebug({\n      event: 'input',\n      data: value + ' / cursor: ' + selectionStart + ' / composing: ' + composing + ' / line: ' + lineIndex\n    });\n\n    // 조합 중에는 현재 텍스트만 업데이트하고 커서 위치 유지\n    if (composing) {\n      setCurrentText(value);\n      return;\n    }\n    setCurrentText(value);\n    setUserInput(value);\n    setCurrentPosition(selectionStart);\n    setCurrentLine(lineIndex);\n\n    // 타이핑 완료 체크\n    if (value === currentPoem.content) {\n      setCompleted(true);\n    }\n  };\n\n  // IME 조합이 시작될 때 호출됩니다\n  const handleCompositionStart = e => {\n    setComposing(true);\n    setDebug({\n      event: 'composition start',\n      data: e.data || '' + ' / value: ' + e.currentTarget.value\n    });\n  };\n\n  // IME 조합이 진행 중일 때 호출됩니다\n  const handleCompositionUpdate = e => {\n    const value = e.currentTarget.value;\n    setCurrentText(value);\n    setDebug({\n      event: 'composition update',\n      data: e.data || '' + ' / value: ' + value\n    });\n  };\n\n  // IME 조합이 완료될 때 호출됩니다\n  const handleCompositionEnd = e => {\n    const finalValue = e.currentTarget.value;\n    setComposing(false);\n    setCurrentText(finalValue);\n    setUserInput(finalValue);\n\n    // 커서 위치 설정 - 선택 위치 사용\n    const cursorPos = e.currentTarget.selectionStart || finalValue.length;\n\n    // 현재 커서 위치에 따른 줄 계산\n    let lineIndex = 0;\n    let charCount = 0;\n    const lines = finalValue.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      const lineLength = lines[i].length;\n      if (cursorPos >= charCount && cursorPos <= charCount + lineLength) {\n        lineIndex = i;\n        break;\n      }\n      charCount += lineLength + 1; // +1 for newline\n    }\n    setCurrentPosition(cursorPos);\n    setCurrentLine(lineIndex);\n    setDebug({\n      event: 'composition end',\n      data: e.data || '' + ' / value: ' + finalValue + ' / cursor: ' + cursorPos + ' / line: ' + lineIndex\n    });\n  };\n  const handleKeyDown = e => {\n    // 백스페이스 처리\n    if (e.key === 'Backspace' && !composing) {\n      e.preventDefault();\n\n      // 마지막 문자가 줄바꿈인지 확인\n      const isRemovingNewline = currentText.endsWith('\\n');\n      const newInput = currentText.slice(0, -1);\n      setCurrentText(newInput);\n      setUserInput(newInput);\n\n      // 삭제 후 커서 위치 업데이트\n      const newCursorPos = newInput.length;\n      setCurrentPosition(newCursorPos);\n\n      // 줄바꿈을 삭제한 경우 현재 줄 번호 업데이트\n      if (isRemovingNewline && currentLine > 0) {\n        setCurrentLine(currentLine - 1);\n      } else {\n        // 일반 문자 삭제 후 현재 줄 계산\n        const lines = newInput.split('\\n');\n        let lineIndex = 0;\n        let charCount = 0;\n        for (let i = 0; i < lines.length; i++) {\n          const lineLength = lines[i].length;\n          if (newCursorPos >= charCount && newCursorPos <= charCount + lineLength) {\n            lineIndex = i;\n            break;\n          }\n          charCount += lineLength + 1;\n        }\n        setCurrentLine(lineIndex);\n      }\n    }\n\n    // Enter 키 처리\n    if (e.key === 'Enter' && !composing) {\n      e.preventDefault();\n\n      // 현재 텍스트를 줄 단위로 분리\n      const textLines = currentText.split('\\n');\n\n      // 현재 커서가 어느 줄에 있는지 확인\n      let currentLineIndex = 0;\n      let charCount = 0;\n      for (let i = 0; i < textLines.length; i++) {\n        const lineLength = textLines[i].length;\n        if (currentPosition >= charCount && currentPosition <= charCount + lineLength) {\n          currentLineIndex = i;\n          break;\n        }\n        // +1은 줄바꿈 문자\n        charCount += lineLength + 1;\n      }\n\n      // 현재 줄이 원본 시의 해당 줄과 일치하는지 확인\n      if (currentLineIndex < poemLines.length) {\n        const originalLine = poemLines[currentLineIndex];\n        const inputLine = textLines[currentLineIndex];\n\n        // 현재 줄을 모두 입력했고 원본과 일치하는지 확인\n        if (inputLine === originalLine) {\n          // 다음 줄로 넘어갈 수 있는 경우\n          if (currentLineIndex < poemLines.length - 1) {\n            // 줄바꿈 추가\n            const newText = [...textLines];\n            // 빈 줄 추가 (다음 줄이 존재하지 않는 경우)\n            if (newText.length <= currentLineIndex + 1) {\n              newText.push('');\n            }\n            const newInput = newText.join('\\n');\n            setCurrentText(newInput);\n            setUserInput(newInput);\n            setCurrentLine(currentLineIndex + 1); // 현재 줄 업데이트\n\n            // 다음 줄 첫 글자 위치로 커서 이동\n            let newPosition = 0;\n            for (let i = 0; i <= currentLineIndex; i++) {\n              newPosition += newText[i].length;\n              if (i < newText.length - 1) {\n                newPosition += 1; // 줄바꿈 문자 길이\n              }\n            }\n            setCurrentPosition(newPosition);\n          }\n        }\n      }\n    }\n  };\n\n  // 렌더링 함수 수정\n  const renderOverlayText = () => {\n    const overlayContent = [];\n    const targetChars = currentPoem.content.split('');\n    const inputChars = currentText.split('');\n    let skipNextNewline = false;\n\n    // 기존의 각 문자별 처리 방식 대신, 원문 텍스트 위에 입력 텍스트를 그대로 표시\n    for (let i = 0; i < targetChars.length; i++) {\n      const targetChar = targetChars[i];\n      const inputChar = i < inputChars.length ? inputChars[i] : '';\n      const showCursor = i === currentPosition;\n\n      // 줄바꿈 문자 처리\n      if (targetChar === '\\n') {\n        if (skipNextNewline) {\n          skipNextNewline = false;\n          continue;\n        }\n        overlayContent.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative',\n            display: 'block',\n            height: '1.8em'\n          },\n          children: [i < inputChars.length && inputChars[i] === '\\n' ? /*#__PURE__*/_jsxDEV(Char, {\n            status: \"correct\",\n            children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 15\n          }, this) : null, showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 28\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this));\n        continue;\n      }\n\n      // 입력된 글자 처리\n      if (i < inputChars.length) {\n        // 줄바꿈 이후의 글자 처리 (줄바꿈이 발생한 경우)\n        if (inputChar === '\\n' && targetChar !== '\\n') {\n          // 입력에는 줄바꿈이 있지만 타겟에는 없는 경우 - 이는 불일치\n          overlayContent.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              position: 'relative',\n              display: 'block',\n              height: '1.8em'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Char, {\n              status: \"incorrect\",\n              children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 15\n            }, this), showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 30\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 13\n          }, this));\n          continue;\n        }\n        let status = isPartialMatch(targetChar, inputChar) ? 'correct' : 'incorrect';\n        overlayContent.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Char, {\n            status: status,\n            children: inputChar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this), showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 28\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this));\n      }\n      // 아직 입력되지 않은 글자는 커서만 표시\n      else {\n        overlayContent.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 28\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return overlayContent;\n  };\n  const progress = calculateProgress();\n\n  // 입력 필드에 포커스 유지를 위한 효과 추가\n  useEffect(() => {\n    const focusInterval = setInterval(() => {\n      if (inputRef.current && document.activeElement !== inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 500);\n    return () => clearInterval(focusInterval);\n  }, []);\n\n  // 초기화 시 커서 위치를 0으로 설정\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n      setCurrentPosition(0);\n    }\n  }, []); // 의존성 배열 비워둠\n\n  useEffect(() => {\n    checkLineCompletion();\n  }, [currentLine, currentText, checkLineCompletion]);\n\n  // 줄바꿈 처리를 위한 함수 추가\n  const renderOverlayLine = (targetLine, lineIndex) => {\n    // 현재 텍스트를 줄 단위로 분리\n    const textLines = currentText.split('\\n');\n    // 현재 줄에 해당하는 텍스트 (해당 줄 인덱스가 없으면 빈 문자열)\n    const inputContent = lineIndex < textLines.length ? textLines[lineIndex] : '';\n\n    // 현재 줄의 시작 위치 계산 (전체 텍스트에서의 절대 위치)\n    let lineStartPos = 0;\n    for (let i = 0; i < lineIndex; i++) {\n      lineStartPos += poemLines[i].length + 1; // +1 for newline\n    }\n\n    // 줄 내 문자 단위 처리\n    const result = [];\n    for (let i = 0; i < targetLine.length; i++) {\n      const targetChar = targetLine[i];\n      const inputChar = i < inputContent.length ? inputContent[i] : '';\n      const globalCharPos = lineStartPos + i;\n      const showCursor = globalCharPos === currentPosition;\n      if (i < inputContent.length) {\n        // 입력된 글자 처리\n        const status = isPartialMatch(targetChar, inputChar) ? 'correct' : 'incorrect';\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Char, {\n            status: status,\n            children: inputChar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this), showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 28\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 11\n        }, this));\n      } else {\n        // 입력되지 않은 글자는 커서만 표시\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 28\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    // 초과 입력된 글자들 처리 (정확히 그 줄에 대해서만)\n    if (inputContent.length > targetLine.length) {\n      for (let i = targetLine.length; i < inputContent.length; i++) {\n        const globalCharPos = lineStartPos + i;\n        const showCursor = globalCharPos === currentPosition;\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Char, {\n            status: \"incorrect\",\n            children: inputContent[i]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 13\n          }, this), showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 28\n          }, this)]\n        }, `excess-${i}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return result;\n  };\n\n  // 렌더링 부분 수정 - 각 줄을 개별적으로 처리, 줄 간격 수정\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    onClick: () => {\n      var _inputRef$current;\n      return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    },\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"\\uC2DC \\uD0C0\\uC774\\uD551 \\uC5F0\\uC2B5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }, this), (process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost') && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uB514\\uBC84\\uADF8 \\uC815\\uBCF4:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(debug, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      children: /*#__PURE__*/_jsxDEV(Progress, {\n        width: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TypingArea, {\n      children: /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: [poemLines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'relative',\n            height: '1.8em',\n            marginBottom: '0.5em',\n            clear: 'both'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: '#666',\n              whiteSpace: 'pre-wrap',\n              overflow: 'visible'\n            },\n            children: line\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              whiteSpace: 'pre-wrap',\n              zIndex: 2,\n              width: '100%',\n              overflow: 'visible'\n            },\n            children: renderOverlayLine(line, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(HiddenInput, {\n          ref: inputRef,\n          value: currentText,\n          onChange: handleInput,\n          onCompositionStart: handleCompositionStart,\n          onCompositionUpdate: handleCompositionUpdate,\n          onCompositionEnd: handleCompositionEnd,\n          onKeyDown: handleKeyDown,\n          autoFocus: true,\n          autoComplete: \"off\",\n          autoCorrect: \"off\",\n          spellCheck: false,\n          \"aria-label\": \"\\uC2DC \\uC785\\uB825 \\uD544\\uB4DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompletionMessage, {\n      show: completed,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDF89 \\uCD95\\uD558\\uD569\\uB2C8\\uB2E4! \\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC131\\uACF5\\uC801\\uC73C\\uB85C \\uC2DC\\uB97C \\uC644\\uC131\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 643,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"lZ7P3KwYgZNBJREzX87O/8ojyGQ=\");\n_c11 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"TypingArea\");\n$RefreshReg$(_c4, \"TextContainer\");\n$RefreshReg$(_c5, \"Char\");\n$RefreshReg$(_c6, \"ProgressBar\");\n$RefreshReg$(_c7, \"Progress\");\n$RefreshReg$(_c8, \"CompletionMessage\");\n$RefreshReg$(_c9, \"HiddenInput\");\n$RefreshReg$(_c10, \"Cursor\");\n$RefreshReg$(_c11, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","AppContainer","div","_c","Title","h1","_c2","TypingArea","_c3","TextContainer","_c4","BaseText","OverlayText","Char","span","props","status","_c5","ProgressBar","_c6","Progress","width","_c7","CompletionMessage","show","_c8","HiddenInput","input","_c9","Cursor","_c10","poems","title","content","isKorean","char","code","charCodeAt","isChoseong","CHOSEONG","decompose","jong","jung","cho","Math","floor","isPartialMatch","target","targetDecomp","isJungseong","length","inputDecomp","App","_s","userInput","setUserInput","completed","setCompleted","composing","setComposing","currentText","setCurrentText","debug","setDebug","event","data","currentPosition","setCurrentPosition","currentLine","setCurrentLine","inputRef","currentPoem","poemLines","split","calculateProgress","correctChars","filter","i","checkLineCompletion","moveToNextLine","nextLine","nextLineStartPosition","updatedInput","expectedBreaks","actualBreaks","match","endsWith","newPosition","current","focus","handleInput","e","_e$currentTarget","_e$currentTarget$sele","_e$currentTarget2","preventDefault","value","currentTarget","selectionStart","lineIndex","charCount","lines","lineLength","handleCompositionStart","handleCompositionUpdate","handleCompositionEnd","finalValue","cursorPos","handleKeyDown","key","isRemovingNewline","newInput","slice","newCursorPos","textLines","currentLineIndex","originalLine","inputLine","newText","push","join","renderOverlayText","overlayContent","targetChars","inputChars","skipNextNewline","targetChar","inputChar","showCursor","style","position","display","height","children","fileName","_jsxFileName","lineNumber","columnNumber","progress","focusInterval","setInterval","document","activeElement","clearInterval","renderOverlayLine","targetLine","inputContent","lineStartPos","result","globalCharPos","onClick","_inputRef$current","process","env","NODE_ENV","window","location","hostname","className","JSON","stringify","map","line","index","marginBottom","clear","color","whiteSpace","overflow","top","left","zIndex","ref","onChange","onCompositionStart","onCompositionUpdate","onCompositionEnd","onKeyDown","autoFocus","autoComplete","autoCorrect","spellCheck","_c11","$RefreshReg$"],"sources":["/Users/haeunkim/Desktop/project/typescript/SIRO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n  background-color: #2b2b2b;\n  min-height: 100vh;\n  color: #fff;\n`;\n\nconst Title = styled.h1`\n  color: #fff;\n  margin-bottom: 2rem;\n`;\n\nconst TypingArea = styled.div`\n  margin-bottom: 2rem;\n  position: relative;\n  text-align: left;\n`;\n\nconst TextContainer = styled.div`\n  position: relative;\n  font-size: 1.2rem;\n  line-height: 1.8;\n  font-family: monospace;\n`;\n\nconst BaseText = styled.div`\n  white-space: pre-wrap;\n  color: #666;\n  position: relative;\n  z-index: 1;\n  min-height: 200px;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\n\nconst OverlayText = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  white-space: pre-wrap;\n  z-index: 2;\n  width: 100%;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\n\nconst Char = styled.span<{ status: 'correct' | 'incorrect' | 'waiting' }>`\n  color: ${props => {\n    switch (props.status) {\n      case 'correct': return '#fff';\n      case 'incorrect': return '#ff4444';\n      case 'waiting': return '#666';\n    }\n  }};\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 4px;\n  background-color: #444;\n  margin-bottom: 1rem;\n  border-radius: 2px;\n`;\n\nconst Progress = styled.div<{ width: number }>`\n  width: ${props => props.width}%;\n  height: 100%;\n  background-color: ${props => props.width === 100 ? '#4CAF50' : '#666'};\n  border-radius: 2px;\n  transition: width 0.3s ease;\n`;\n\nconst CompletionMessage = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.9);\n  padding: 2rem;\n  border-radius: 8px;\n  display: ${props => props.show ? 'block' : 'none'};\n  z-index: 100;\n  text-align: center;\n`;\n\nconst HiddenInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  pointer-events: auto;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  cursor: text;\n`;\n\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 2px;\n  height: 1.4em;\n  background-color: #fff;\n  margin-left: -1px;\n  margin-right: 1px;\n  vertical-align: middle;\n  animation: blink 1s step-end infinite;\n  position: relative;\n  \n  @keyframes blink {\n    from, to {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0;\n    }\n  }\n`;\n\nconst poems = [\n  {\n    title: '대화',\n    content: `사랑을 잃고 나는 쓰네\n잘 있거라, 짧았던 밤들아\n창밖을 떠돌던 겨울 안개들아\n아무것도 모르던 촛불들아, 잘 있거라\n공포를 기다리던 흰 종이들아\n말설임을 대신하던 눈물들아\n잘 있거라, 더 이상 내 것이 아닌 열망들아\n장님처럼 나 이제 더듬거리며 문을 잠그네\n가엾은 내 사랑 빈집에 갇혔네`,\n  }\n];\n\n// 한글 유니코드 범위 체크\nconst isKorean = (char: string) => {\n  const code = char.charCodeAt(0);\n  return code >= 0xAC00 && code <= 0xD7A3;\n};\n\n// 초성 검사\nconst isChoseong = (char: string) => {\n  const code = char.charCodeAt(0);\n  return code >= 0x3131 && code <= 0x314E;\n};\n\n// 초성 테이블\nconst CHOSEONG = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n// 한글 자모 분리\nconst decompose = (char: string) => {\n  const code = char.charCodeAt(0) - 0xAC00;\n  if (code < 0 || code > 11171) return null;\n\n  const jong = code % 28;\n  const jung = ((code - jong) / 28) % 21;\n  const cho = ((code - jong) / 28 - jung) / 21;\n\n  return {\n    cho: Math.floor(cho),\n    jung: Math.floor(jung),\n    jong: Math.floor(jong)\n  };\n};\n\n// 현재 입력이 목표의 일부인지 확인 (로직 개선)\nconst isPartialMatch = (target: string, input: string) => {\n  // 한글이 아니면 정확히 일치해야 함\n  if (!isKorean(target)) return target === input;\n  \n  // 완전히 일치하는 경우\n  if (target === input) return true;\n\n  // 초성만 입력된 경우 (예: 목표가 '사', 입력이 'ㅅ')\n  if (isChoseong(input)) {\n    const targetDecomp = decompose(target);\n    if (targetDecomp) {\n      return CHOSEONG[targetDecomp.cho] === input;\n    }\n  }\n  \n  // 중성만 입력된 경우 (중성 검사 함수 직접 사용)\n  const isJungseong = (char: string) => {\n    const code = char.charCodeAt(0);\n    return code >= 0x314F && code <= 0x3163;\n  };\n  \n  if (isJungseong(input)) {\n    return false; // 중성만 있는 경우는 일치하지 않음\n  }\n  \n  // 종성까지 입력된 경우 (예: 목표가 '라', 입력이 '랄')\n  if (input.length === 1 && isKorean(input)) {\n    const inputDecomp = decompose(input);\n    const targetDecomp = decompose(target);\n    \n    if (inputDecomp && targetDecomp) {\n      // 초성과 중성이 일치하면 부분 일치로 간주\n      return inputDecomp.cho === targetDecomp.cho && \n             inputDecomp.jung === targetDecomp.jung;\n    }\n  }\n  \n  return false;\n};\n\nconst App: React.FC = () => {\n  const [userInput, setUserInput] = useState('');\n  const [completed, setCompleted] = useState(false);\n  const [composing, setComposing] = useState(false);\n  const [currentText, setCurrentText] = useState('');\n  const [debug, setDebug] = useState({ event: '', data: '' });\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [currentLine, setCurrentLine] = useState(0);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const currentPoem = poems[0];\n  \n  // 시를 줄 단위로 분할\n  const poemLines = currentPoem.content.split('\\n');\n  \n  const calculateProgress = () => {\n    if (userInput.length === 0) return 0;\n    const correctChars = userInput.split('').filter((char, i) => char === currentPoem.content[i]).length;\n    return (correctChars / currentPoem.content.length) * 100;\n  };\n\n  // 현재 줄이 완성되었는지 확인하는 함수 (로그 완전 제거)\n  const checkLineCompletion = () => {\n    // 자동 줄바꿈 비활성화\n    return;\n  };\n\n  // 다음 줄로 이동하는 함수 (로그 제거 및 최적화)\n  const moveToNextLine = () => {\n    // 마지막 줄이면 처리하지 않음\n    if (currentLine >= poemLines.length - 1) return;\n    \n    // 같은 줄을 다시 처리하지 않도록 행 번호 증가\n    const nextLine = currentLine + 1;\n    \n    // 다음 줄의 시작 위치 계산\n    let nextLineStartPosition = 0;\n    for (let i = 0; i < nextLine; i++) {\n      nextLineStartPosition += poemLines[i].length;\n      if (i < nextLine - 1) nextLineStartPosition += 1; // 이전 줄들의 줄바꿈\n    }\n    \n    // 줄바꿈이 이미 있는지 확인 (중복 추가 방지)\n    let updatedInput = userInput;\n    const expectedBreaks = currentLine;\n    const actualBreaks = (userInput.match(/\\n/g) || []).length;\n    \n    if (actualBreaks < expectedBreaks + 1) {\n      // 줄바꿈이 없으면 추가 (중복 방지)\n      if (!updatedInput.endsWith('\\n')) {\n        updatedInput = userInput + '\\n';\n        setUserInput(updatedInput);\n        setCurrentText(updatedInput);\n      }\n    }\n    \n    // 상태 업데이트 - 다음 줄로 이동\n    setCurrentLine(nextLine);\n    \n    // 현재 입력 위치 업데이트 (+1은 줄바꿈)\n    const newPosition = nextLineStartPosition + (nextLine > 0 ? 1 : 0);\n    setCurrentPosition(newPosition);\n    \n    // 포커스 유지\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  // useEffect 의존성 배열 수정\n  useEffect(() => {\n    // 조합 중일 때는 체크하지 않음\n    if (!composing) {\n      checkLineCompletion();\n    }\n  }, [userInput, composing, currentLine, poemLines]); // checkLineCompletion 제거\n\n  // 입력 처리 함수 (현재 줄 업데이트 포함)\n  const handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    const value = e.currentTarget?.value || '';\n    const selectionStart = e.currentTarget?.selectionStart ?? 0;\n\n    // 입력 시 현재 줄 계산\n    let lineIndex = 0;\n    let charCount = 0;\n    const lines = value.split('\\n');\n    \n    for (let i = 0; i < lines.length; i++) {\n      const lineLength = lines[i].length;\n      if (selectionStart >= charCount && selectionStart <= charCount + lineLength) {\n        lineIndex = i;\n        break;\n      }\n      charCount += lineLength + 1; // +1 for newline\n    }\n    \n    setDebug({\n      event: 'input',\n      data: value + ' / cursor: ' + selectionStart + ' / composing: ' + composing + ' / line: ' + lineIndex\n    });\n    \n    // 조합 중에는 현재 텍스트만 업데이트하고 커서 위치 유지\n    if (composing) {\n      setCurrentText(value);\n      return;\n    }\n    \n    setCurrentText(value);\n    setUserInput(value);\n    setCurrentPosition(selectionStart);\n    setCurrentLine(lineIndex);\n    \n    // 타이핑 완료 체크\n    if (value === currentPoem.content) {\n      setCompleted(true);\n    }\n  };\n\n  // IME 조합이 시작될 때 호출됩니다\n  const handleCompositionStart = (e: React.CompositionEvent<HTMLInputElement>) => {\n    setComposing(true);\n    setDebug({ \n      event: 'composition start', \n      data: e.data || '' + ' / value: ' + e.currentTarget.value \n    });\n  };\n\n  // IME 조합이 진행 중일 때 호출됩니다\n  const handleCompositionUpdate = (e: React.CompositionEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n    setCurrentText(value);\n    setDebug({ \n      event: 'composition update', \n      data: e.data || '' + ' / value: ' + value\n    });\n  };\n\n  // IME 조합이 완료될 때 호출됩니다\n  const handleCompositionEnd = (e: React.CompositionEvent<HTMLInputElement>) => {\n    const finalValue = e.currentTarget.value;\n    setComposing(false);\n    setCurrentText(finalValue);\n    setUserInput(finalValue);\n    \n    // 커서 위치 설정 - 선택 위치 사용\n    const cursorPos = e.currentTarget.selectionStart || finalValue.length;\n    \n    // 현재 커서 위치에 따른 줄 계산\n    let lineIndex = 0;\n    let charCount = 0;\n    const lines = finalValue.split('\\n');\n    \n    for (let i = 0; i < lines.length; i++) {\n      const lineLength = lines[i].length;\n      if (cursorPos >= charCount && cursorPos <= charCount + lineLength) {\n        lineIndex = i;\n        break;\n      }\n      charCount += lineLength + 1; // +1 for newline\n    }\n    \n    setCurrentPosition(cursorPos);\n    setCurrentLine(lineIndex);\n    \n    setDebug({ \n      event: 'composition end', \n      data: e.data || '' + ' / value: ' + finalValue + ' / cursor: ' + cursorPos + ' / line: ' + lineIndex\n    });\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    // 백스페이스 처리\n    if (e.key === 'Backspace' && !composing) {\n      e.preventDefault();\n      \n      // 마지막 문자가 줄바꿈인지 확인\n      const isRemovingNewline = currentText.endsWith('\\n');\n      \n      const newInput = currentText.slice(0, -1);\n      setCurrentText(newInput);\n      setUserInput(newInput);\n      \n      // 삭제 후 커서 위치 업데이트\n      const newCursorPos = newInput.length;\n      setCurrentPosition(newCursorPos);\n      \n      // 줄바꿈을 삭제한 경우 현재 줄 번호 업데이트\n      if (isRemovingNewline && currentLine > 0) {\n        setCurrentLine(currentLine - 1);\n      } else {\n        // 일반 문자 삭제 후 현재 줄 계산\n        const lines = newInput.split('\\n');\n        let lineIndex = 0;\n        let charCount = 0;\n        \n        for (let i = 0; i < lines.length; i++) {\n          const lineLength = lines[i].length;\n          if (newCursorPos >= charCount && newCursorPos <= charCount + lineLength) {\n            lineIndex = i;\n            break;\n          }\n          charCount += lineLength + 1;\n        }\n        \n        setCurrentLine(lineIndex);\n      }\n    }\n    \n    // Enter 키 처리\n    if (e.key === 'Enter' && !composing) {\n      e.preventDefault();\n      \n      // 현재 텍스트를 줄 단위로 분리\n      const textLines = currentText.split('\\n');\n      \n      // 현재 커서가 어느 줄에 있는지 확인\n      let currentLineIndex = 0;\n      let charCount = 0;\n      \n      for (let i = 0; i < textLines.length; i++) {\n        const lineLength = textLines[i].length;\n        if (currentPosition >= charCount && currentPosition <= charCount + lineLength) {\n          currentLineIndex = i;\n          break;\n        }\n        // +1은 줄바꿈 문자\n        charCount += lineLength + 1;\n      }\n      \n      // 현재 줄이 원본 시의 해당 줄과 일치하는지 확인\n      if (currentLineIndex < poemLines.length) {\n        const originalLine = poemLines[currentLineIndex];\n        const inputLine = textLines[currentLineIndex];\n        \n        // 현재 줄을 모두 입력했고 원본과 일치하는지 확인\n        if (inputLine === originalLine) {\n          // 다음 줄로 넘어갈 수 있는 경우\n          if (currentLineIndex < poemLines.length - 1) {\n            // 줄바꿈 추가\n            const newText = [...textLines];\n            // 빈 줄 추가 (다음 줄이 존재하지 않는 경우)\n            if (newText.length <= currentLineIndex + 1) {\n              newText.push('');\n            }\n            \n            const newInput = newText.join('\\n');\n            \n            setCurrentText(newInput);\n            setUserInput(newInput);\n            setCurrentLine(currentLineIndex + 1); // 현재 줄 업데이트\n            \n            // 다음 줄 첫 글자 위치로 커서 이동\n            let newPosition = 0;\n            for (let i = 0; i <= currentLineIndex; i++) {\n              newPosition += newText[i].length;\n              if (i < newText.length - 1) {\n                newPosition += 1; // 줄바꿈 문자 길이\n              }\n            }\n            setCurrentPosition(newPosition);\n          }\n        }\n      }\n    }\n  };\n\n  // 렌더링 함수 수정\n  const renderOverlayText = () => {\n    const overlayContent = [];\n    const targetChars = currentPoem.content.split('');\n    const inputChars = currentText.split('');\n    \n    let skipNextNewline = false;\n    \n    // 기존의 각 문자별 처리 방식 대신, 원문 텍스트 위에 입력 텍스트를 그대로 표시\n    for (let i = 0; i < targetChars.length; i++) {\n      const targetChar = targetChars[i];\n      const inputChar = i < inputChars.length ? inputChars[i] : '';\n      const showCursor = i === currentPosition;\n      \n      // 줄바꿈 문자 처리\n      if (targetChar === '\\n') {\n        if (skipNextNewline) {\n          skipNextNewline = false;\n          continue;\n        }\n        \n        overlayContent.push(\n          <span key={i} style={{ position: 'relative', display: 'block', height: '1.8em' }}>\n            {i < inputChars.length && inputChars[i] === '\\n' ? (\n              <Char status=\"correct\">\n                <br />\n              </Char>\n            ) : null}\n            {showCursor && <Cursor />}\n          </span>\n        );\n        continue;\n      }\n      \n      // 입력된 글자 처리\n      if (i < inputChars.length) {\n        // 줄바꿈 이후의 글자 처리 (줄바꿈이 발생한 경우)\n        if (inputChar === '\\n' && targetChar !== '\\n') {\n          // 입력에는 줄바꿈이 있지만 타겟에는 없는 경우 - 이는 불일치\n          overlayContent.push(\n            <span key={i} style={{ position: 'relative', display: 'block', height: '1.8em' }}>\n              <Char status=\"incorrect\">\n                <br />\n              </Char>\n              {showCursor && <Cursor />}\n            </span>\n          );\n          continue;\n        }\n        \n        let status: 'correct' | 'incorrect' = isPartialMatch(targetChar, inputChar) ? 'correct' : 'incorrect';\n        \n        overlayContent.push(\n          <span key={i} style={{ position: 'relative' }}>\n            <Char status={status}>\n              {inputChar}\n            </Char>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      } \n      // 아직 입력되지 않은 글자는 커서만 표시\n      else {\n        overlayContent.push(\n          <span key={i} style={{ position: 'relative' }}>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      }\n    }\n    \n    return overlayContent;\n  };\n\n  const progress = calculateProgress();\n\n  // 입력 필드에 포커스 유지를 위한 효과 추가\n  useEffect(() => {\n    const focusInterval = setInterval(() => {\n      if (inputRef.current && document.activeElement !== inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 500);\n    \n    return () => clearInterval(focusInterval);\n  }, []);\n\n  // 초기화 시 커서 위치를 0으로 설정\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n      setCurrentPosition(0);\n    }\n  }, []); // 의존성 배열 비워둠\n\n  useEffect(() => {\n    checkLineCompletion();\n  }, [currentLine, currentText, checkLineCompletion]);\n\n  // 줄바꿈 처리를 위한 함수 추가\n  const renderOverlayLine = (targetLine: string, lineIndex: number) => {\n    // 현재 텍스트를 줄 단위로 분리\n    const textLines = currentText.split('\\n');\n    // 현재 줄에 해당하는 텍스트 (해당 줄 인덱스가 없으면 빈 문자열)\n    const inputContent = lineIndex < textLines.length ? textLines[lineIndex] : '';\n    \n    // 현재 줄의 시작 위치 계산 (전체 텍스트에서의 절대 위치)\n    let lineStartPos = 0;\n    for (let i = 0; i < lineIndex; i++) {\n      lineStartPos += poemLines[i].length + 1; // +1 for newline\n    }\n\n    // 줄 내 문자 단위 처리\n    const result: JSX.Element[] = [];\n    for (let i = 0; i < targetLine.length; i++) {\n      const targetChar = targetLine[i];\n      const inputChar = i < inputContent.length ? inputContent[i] : '';\n      const globalCharPos = lineStartPos + i;\n      const showCursor = globalCharPos === currentPosition;\n\n      if (i < inputContent.length) {\n        // 입력된 글자 처리\n        const status = isPartialMatch(targetChar, inputChar) ? 'correct' : 'incorrect';\n        result.push(\n          <span key={i} style={{ position: 'relative' }}>\n            <Char status={status}>{inputChar}</Char>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      } else {\n        // 입력되지 않은 글자는 커서만 표시\n        result.push(\n          <span key={i} style={{ position: 'relative' }}>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      }\n    }\n\n    // 초과 입력된 글자들 처리 (정확히 그 줄에 대해서만)\n    if (inputContent.length > targetLine.length) {\n      for (let i = targetLine.length; i < inputContent.length; i++) {\n        const globalCharPos = lineStartPos + i;\n        const showCursor = globalCharPos === currentPosition;\n        result.push(\n          <span key={`excess-${i}`} style={{ position: 'relative' }}>\n            <Char status=\"incorrect\">{inputContent[i]}</Char>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      }\n    }\n\n    return result;\n  };\n\n  // 렌더링 부분 수정 - 각 줄을 개별적으로 처리, 줄 간격 수정\n  return (\n    <AppContainer onClick={() => inputRef.current?.focus()}>\n      <Title>시 타이핑 연습</Title>\n      {/* 디버그 정보 표시 (개발 모드에서만) */}\n      {(process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost') && (\n        <div className=\"debug\">\n          <h3>디버그 정보:</h3>\n          <pre>{JSON.stringify(debug, null, 2)}</pre>\n        </div>\n      )}\n      <ProgressBar>\n        <Progress width={progress} />\n      </ProgressBar>\n      <TypingArea>\n        <TextContainer>\n          {/* 줄 단위로 처리하여 텍스트 정렬 문제 해결 */}\n          {poemLines.map((line, index) => (\n            <div \n              key={index} \n              style={{ \n                position: 'relative', \n                height: '1.8em', \n                marginBottom: '0.5em',\n                clear: 'both'\n              }}\n            >\n              {/* 원본 텍스트 (회색) */}\n              <div style={{ \n                color: '#666', \n                whiteSpace: 'pre-wrap', \n                overflow: 'visible' \n              }}>\n                {line}\n              </div>\n              \n              {/* 오버레이 텍스트 (입력된 텍스트) */}\n              <div \n                style={{ \n                  position: 'absolute', \n                  top: 0, \n                  left: 0, \n                  whiteSpace: 'pre-wrap',\n                  zIndex: 2,\n                  width: '100%',\n                  overflow: 'visible'\n                }}\n              >\n                {renderOverlayLine(line, index)}\n              </div>\n            </div>\n          ))}\n          <HiddenInput\n            ref={inputRef}\n            value={currentText}\n            onChange={handleInput}\n            onCompositionStart={handleCompositionStart}\n            onCompositionUpdate={handleCompositionUpdate}\n            onCompositionEnd={handleCompositionEnd}\n            onKeyDown={handleKeyDown}\n            autoFocus\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            spellCheck={false}\n            aria-label=\"시 입력 필드\"\n          />\n        </TextContainer>\n      </TypingArea>\n      <CompletionMessage show={completed}>\n        <h2>🎉 축하합니다! 🎉</h2>\n        <p>성공적으로 시를 완성하셨습니다!</p>\n      </CompletionMessage>\n    </AppContainer>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
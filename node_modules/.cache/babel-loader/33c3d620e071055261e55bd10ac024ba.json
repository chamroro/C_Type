{"ast":null,"code":"var _jsxFileName = \"/Users/haeunkim/Desktop/project/typescript/SIRO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n  background-color: #2b2b2b;\n  min-height: 100vh;\n  color: #fff;\n`;\n_c = AppContainer;\nconst Title = styled.h1`\n  color: #fff;\n  margin-bottom: 2rem;\n`;\n_c2 = Title;\nconst TypingArea = styled.div`\n  margin-bottom: 2rem;\n  position: relative;\n  text-align: left;\n`;\n_c3 = TypingArea;\nconst TextContainer = styled.div`\n  position: relative;\n  font-size: 1.2rem;\n  line-height: 1.8;\n  font-family: monospace;\n`;\n_c4 = TextContainer;\nconst BaseText = styled.div`\n  white-space: pre-wrap;\n  color: #666;\n  position: relative;\n  z-index: 1;\n  min-height: 200px;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\n_c5 = BaseText;\nconst OverlayText = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  white-space: pre-wrap;\n  z-index: 2;\n  width: 100%;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\nconst Char = styled.span`\n  color: ${props => {\n  switch (props.status) {\n    case 'correct':\n      return '#fff';\n    case 'incorrect':\n      return '#ff4444';\n    case 'waiting':\n      return '#666';\n  }\n}};\n`;\n_c6 = Char;\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 4px;\n  background-color: #444;\n  margin-bottom: 1rem;\n  border-radius: 2px;\n`;\n_c7 = ProgressBar;\nconst Progress = styled.div`\n  width: ${props => props.width}%;\n  height: 100%;\n  background-color: ${props => props.width === 100 ? '#4CAF50' : '#666'};\n  border-radius: 2px;\n  transition: width 0.3s ease;\n`;\n_c8 = Progress;\nconst CompletionMessage = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.9);\n  padding: 2rem;\n  border-radius: 8px;\n  display: ${props => props.show ? 'block' : 'none'};\n  z-index: 100;\n  text-align: center;\n`;\n_c9 = CompletionMessage;\nconst HiddenInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  pointer-events: auto;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  cursor: text;\n`;\n_c10 = HiddenInput;\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 2px;\n  height: 1.4em;\n  background-color: #fff;\n  margin-left: -1px;\n  margin-right: 1px;\n  vertical-align: middle;\n  animation: blink 1s step-end infinite;\n  position: relative;\n  \n  @keyframes blink {\n    from, to {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0;\n    }\n  }\n`;\n_c11 = Cursor;\nconst poems = [{\n  title: '대화',\n  content: `사랑을 잃고 나는 쓰네\n잘 있거라, 짧았던 밤들아\n창밖을 떠돌던 겨울 안개들아\n아무것도 모르던 촛불들아, 잘 있거라\n공포를 기다리던 흰 종이들아\n말설임을 대신하던 눈물들아\n잘 있거라, 더 이상 내 것이 아닌 열망들아\n장님처럼 나 이제 더듬거리며 문을 잠그네\n가엾은 내 사랑 빈집에 갇혔네`\n}];\n\n// 한글 유니코드 범위 체크\nconst isKorean = char => {\n  const code = char.charCodeAt(0);\n  return code >= 0xAC00 && code <= 0xD7A3;\n};\n\n// 초성 검사\nconst isChoseong = char => {\n  const code = char.charCodeAt(0);\n  return code >= 0x3131 && code <= 0x314E;\n};\n\n// 초성 테이블\nconst CHOSEONG = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n// 한글 자모 분리\nconst decompose = char => {\n  const code = char.charCodeAt(0) - 0xAC00;\n  if (code < 0 || code > 11171) return null;\n  const jong = code % 28;\n  const jung = (code - jong) / 28 % 21;\n  const cho = ((code - jong) / 28 - jung) / 21;\n  return {\n    cho: Math.floor(cho),\n    jung: Math.floor(jung),\n    jong: Math.floor(jong)\n  };\n};\n\n// 현재 입력이 목표의 일부인지 확인 (로직 개선)\nconst isPartialMatch = (target, input) => {\n  // 한글이 아니면 정확히 일치해야 함\n  if (!isKorean(target)) return target === input;\n\n  // 완전히 일치하는 경우\n  if (target === input) return true;\n\n  // 초성만 입력된 경우 (예: 목표가 '사', 입력이 'ㅅ')\n  if (isChoseong(input)) {\n    const targetDecomp = decompose(target);\n    if (targetDecomp) {\n      return CHOSEONG[targetDecomp.cho] === input;\n    }\n  }\n\n  // 중성만 입력된 경우 (중성 검사 함수 직접 사용)\n  const isJungseong = char => {\n    const code = char.charCodeAt(0);\n    return code >= 0x314F && code <= 0x3163;\n  };\n  if (isJungseong(input)) {\n    return false; // 중성만 있는 경우는 일치하지 않음\n  }\n\n  // 종성까지 입력된 경우 (예: 목표가 '라', 입력이 '랄')\n  if (input.length === 1 && isKorean(input)) {\n    const inputDecomp = decompose(input);\n    const targetDecomp = decompose(target);\n    if (inputDecomp && targetDecomp) {\n      // 초성과 중성이 일치하면 부분 일치로 간주\n      return inputDecomp.cho === targetDecomp.cho && inputDecomp.jung === targetDecomp.jung;\n    }\n  }\n  return false;\n};\nconst App = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [completed, setCompleted] = useState(false);\n  const [composing, setComposing] = useState(false);\n  const [currentText, setCurrentText] = useState('');\n  const [debug, setDebug] = useState({\n    event: '',\n    data: ''\n  });\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [currentLine, setCurrentLine] = useState(0);\n  const inputRef = useRef(null);\n  const currentPoem = poems[0];\n\n  // 시를 줄 단위로 분할\n  const poemLines = currentPoem.content.split('\\n');\n  const calculateProgress = () => {\n    if (userInput.length === 0) return 0;\n    const correctChars = userInput.split('').filter((char, i) => char === currentPoem.content[i]).length;\n    return correctChars / currentPoem.content.length * 100;\n  };\n\n  // 현재 줄이 완성되었는지 확인하는 함수 (자동 줄바꿈 비활성화)\n  const checkLineCompletion = () => {\n    // 자동 줄바꿈 비활성화\n    return;\n  };\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  // useEffect 의존성 배열 수정\n  useEffect(() => {\n    // 조합 중일 때는 체크하지 않음\n    if (!composing) {\n      checkLineCompletion();\n    }\n  }, [userInput, composing, currentLine, poemLines]); // checkLineCompletion 제거\n\n  // 입력 처리 함수 (현재 줄 업데이트 포함)\n  const handleInput = e => {\n    var _e$currentTarget, _e$currentTarget$sele, _e$currentTarget2;\n    e.preventDefault();\n    const value = ((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.value) || '';\n    const selectionStart = (_e$currentTarget$sele = (_e$currentTarget2 = e.currentTarget) === null || _e$currentTarget2 === void 0 ? void 0 : _e$currentTarget2.selectionStart) !== null && _e$currentTarget$sele !== void 0 ? _e$currentTarget$sele : 0;\n\n    // 입력 시 현재 줄 계산\n    let lineIndex = 0;\n    let charCount = 0;\n    const lines = value.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      const lineLength = lines[i].length;\n      if (selectionStart >= charCount && selectionStart <= charCount + lineLength) {\n        lineIndex = i;\n        break;\n      }\n      charCount += lineLength + 1; // +1 for newline\n    }\n    setDebug({\n      event: 'input',\n      data: value + ' / cursor: ' + selectionStart + ' / composing: ' + composing + ' / line: ' + lineIndex\n    });\n\n    // 조합 중에는 현재 텍스트만 업데이트하고 커서 위치 유지\n    if (composing) {\n      setCurrentText(value);\n      return;\n    }\n    setCurrentText(value);\n    setUserInput(value);\n    setCurrentPosition(selectionStart);\n    setCurrentLine(lineIndex);\n\n    // 타이핑 완료 체크\n    if (value === currentPoem.content) {\n      setCompleted(true);\n    }\n  };\n\n  // IME 조합이 시작될 때 호출됩니다\n  const handleCompositionStart = e => {\n    setComposing(true);\n    setDebug({\n      event: 'composition start',\n      data: e.data || '' + ' / value: ' + e.currentTarget.value\n    });\n  };\n\n  // IME 조합이 진행 중일 때 호출됩니다\n  const handleCompositionUpdate = e => {\n    const value = e.currentTarget.value;\n    setCurrentText(value);\n    setDebug({\n      event: 'composition update',\n      data: e.data || '' + ' / value: ' + value\n    });\n  };\n\n  // IME 조합이 완료될 때 호출됩니다\n  const handleCompositionEnd = e => {\n    const finalValue = e.currentTarget.value;\n    setComposing(false);\n    setCurrentText(finalValue);\n    setUserInput(finalValue);\n\n    // 커서 위치 설정 - 선택 위치 사용\n    const cursorPos = e.currentTarget.selectionStart || finalValue.length;\n    setCurrentPosition(cursorPos);\n    setDebug({\n      event: 'composition end',\n      data: e.data || '' + ' / value: ' + finalValue + ' / cursor: ' + cursorPos\n    });\n  };\n  const handleKeyDown = e => {\n    // 백스페이스 처리\n    if (e.key === 'Backspace' && !composing) {\n      e.preventDefault();\n\n      // 마지막 문자가 줄바꿈인지 확인\n      const isRemovingNewline = currentText.endsWith('\\n');\n      const newInput = currentText.slice(0, -1);\n      setCurrentText(newInput);\n      setUserInput(newInput);\n\n      // 삭제 후 커서 위치 업데이트\n      const newCursorPos = newInput.length;\n      setCurrentPosition(newCursorPos);\n\n      // 줄바꿈을 삭제한 경우 현재 줄 번호 업데이트\n      if (isRemovingNewline && currentLine > 0) {\n        setCurrentLine(currentLine - 1);\n      } else {\n        // 일반 문자 삭제 후 현재 줄 계산\n        const lines = newInput.split('\\n');\n        let lineIndex = 0;\n        let charCount = 0;\n        for (let i = 0; i < lines.length; i++) {\n          const lineLength = lines[i].length;\n          if (newCursorPos >= charCount && newCursorPos <= charCount + lineLength) {\n            lineIndex = i;\n            break;\n          }\n          charCount += lineLength + 1;\n        }\n        setCurrentLine(lineIndex);\n      }\n    }\n\n    // Enter 키 처리\n    if (e.key === 'Enter' && !composing) {\n      e.preventDefault();\n\n      // 현재 텍스트를 줄 단위로 분리\n      const textLines = currentText.split('\\n');\n\n      // 현재 커서가 어느 줄에 있는지 확인\n      let currentLineIndex = 0;\n      let charCount = 0;\n      for (let i = 0; i < textLines.length; i++) {\n        const lineLength = textLines[i].length;\n        if (currentPosition >= charCount && currentPosition <= charCount + lineLength) {\n          currentLineIndex = i;\n          break;\n        }\n        // +1은 줄바꿈 문자\n        charCount += lineLength + 1;\n      }\n\n      // 현재 줄이 원본 시의 해당 줄과 일치하는지 확인\n      if (currentLineIndex < poemLines.length) {\n        const originalLine = poemLines[currentLineIndex];\n        const inputLine = textLines[currentLineIndex];\n\n        // 현재 줄을 모두 입력했고 원본과 일치하는지 확인\n        if (inputLine === originalLine) {\n          // 다음 줄로 넘어갈 수 있는 경우\n          if (currentLineIndex < poemLines.length - 1) {\n            // 줄바꿈 추가\n            const newText = [...textLines];\n            // 빈 줄 추가 (다음 줄이 존재하지 않는 경우)\n            if (newText.length <= currentLineIndex + 1) {\n              newText.push('');\n            }\n            const newInput = newText.join('\\n');\n            setCurrentText(newInput);\n            setUserInput(newInput);\n            setCurrentLine(currentLineIndex + 1); // 현재 줄 업데이트\n\n            // 다음 줄 첫 글자 위치로 커서 이동\n            let newPosition = 0;\n            for (let i = 0; i <= currentLineIndex; i++) {\n              newPosition += newText[i].length;\n              if (i < newText.length - 1) {\n                newPosition += 1; // 줄바꿈 문자 길이\n              }\n            }\n            setCurrentPosition(newPosition);\n          }\n        }\n      }\n    }\n  };\n\n  // 줄바꿈 처리를 위한 함수 추가\n  const renderOverlayLine = (targetLine, lineIndex) => {\n    // 현재 텍스트를 줄 단위로 분리\n    const textLines = currentText.split('\\n');\n    // 현재 줄에 해당하는 텍스트 (해당 줄 인덱스가 없으면 빈 문자열)\n    const inputContent = lineIndex < textLines.length ? textLines[lineIndex] : '';\n\n    // 현재 줄의 시작 위치 계산 (전체 텍스트에서의 절대 위치)\n    let lineStartPos = 0;\n    for (let i = 0; i < lineIndex; i++) {\n      lineStartPos += poemLines[i].length + 1; // +1 for newline\n    }\n\n    // 줄 내 문자 단위 처리\n    const result = [];\n    for (let i = 0; i < targetLine.length; i++) {\n      const targetChar = targetLine[i];\n      const inputChar = i < inputContent.length ? inputContent[i] : '';\n      const globalCharPos = lineStartPos + i; // 전체 텍스트에서의 위치\n      const showCursor = globalCharPos === currentPosition;\n      if (i < inputContent.length) {\n        // 입력된 글자 처리\n        const status = isPartialMatch(targetChar, inputChar) ? 'correct' : 'incorrect';\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Char, {\n            status: status,\n            children: inputChar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 28\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this));\n      } else {\n        // 입력되지 않은 글자는 커서만 표시\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 28\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    // 초과 입력된 글자들 처리 (정확히 그 줄에 대해서만)\n    if (inputContent.length > targetLine.length) {\n      for (let i = targetLine.length; i < inputContent.length; i++) {\n        const globalCharPos = lineStartPos + i;\n        const showCursor = globalCharPos === currentPosition;\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Char, {\n            status: \"incorrect\",\n            children: inputContent[i]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), showCursor && /*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 28\n          }, this)]\n        }, `excess-${i}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return result;\n  };\n  const progress = calculateProgress();\n\n  // 초기화 시 커서 위치를 0으로 설정\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n      setCurrentPosition(0);\n    }\n  }, []); // 의존성 배열 비워둠\n\n  useEffect(() => {\n    checkLineCompletion();\n  }, [currentLine, currentText, checkLineCompletion]);\n\n  // 렌더링 부분 수정 - 커서 하나만 표시하도록 변경\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    onClick: () => {\n      var _inputRef$current;\n      return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n    },\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"\\uC2DC \\uD0C0\\uC774\\uD551 \\uC5F0\\uC2B5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), (process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost') && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uB514\\uBC84\\uADF8 \\uC815\\uBCF4:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(debug, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      children: /*#__PURE__*/_jsxDEV(Progress, {\n        width: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TypingArea, {\n      children: /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: [/*#__PURE__*/_jsxDEV(BaseText, {\n          children: currentPoem.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'relative',\n              whiteSpace: 'pre-wrap'\n            },\n            children: [currentText.split('').map((char, idx) => {\n              // 원본 텍스트와 비교\n              const targetChar = idx < currentPoem.content.length ? currentPoem.content[idx] : '';\n              const status = isPartialMatch(targetChar, char) ? 'correct' : 'incorrect';\n\n              // 커서 표시 여부\n              const showCursor = idx === currentPosition - 1;\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  position: 'relative'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Char, {\n                  status: status,\n                  children: char\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 531,\n                  columnNumber: 21\n                }, this), showCursor && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    display: 'inline-block',\n                    width: '2px',\n                    height: '1.4em',\n                    backgroundColor: '#fff',\n                    marginLeft: '1px',\n                    animation: 'blink 1s step-end infinite',\n                    verticalAlign: 'middle'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 532,\n                  columnNumber: 36\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 19\n              }, this);\n            }), currentPosition === currentText.length && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: 'inline-block',\n                width: '2px',\n                height: '1.4em',\n                backgroundColor: '#fff',\n                animation: 'blink 1s step-end infinite',\n                verticalAlign: 'middle'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HiddenInput, {\n          ref: inputRef,\n          value: currentText,\n          onChange: handleInput,\n          onCompositionStart: handleCompositionStart,\n          onCompositionUpdate: handleCompositionUpdate,\n          onCompositionEnd: handleCompositionEnd,\n          onKeyDown: handleKeyDown,\n          autoFocus: true,\n          autoComplete: \"off\",\n          autoCorrect: \"off\",\n          spellCheck: false,\n          \"aria-label\": \"\\uC2DC \\uC785\\uB825 \\uD544\\uB4DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompletionMessage, {\n      show: completed,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDF89 \\uCD95\\uD558\\uD569\\uB2C8\\uB2E4! \\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC131\\uACF5\\uC801\\uC73C\\uB85C \\uC2DC\\uB97C \\uC644\\uC131\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 500,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8942G8CadX30WleytbmV2IZBVTE=\");\n_c12 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"TypingArea\");\n$RefreshReg$(_c4, \"TextContainer\");\n$RefreshReg$(_c5, \"BaseText\");\n$RefreshReg$(_c6, \"Char\");\n$RefreshReg$(_c7, \"ProgressBar\");\n$RefreshReg$(_c8, \"Progress\");\n$RefreshReg$(_c9, \"CompletionMessage\");\n$RefreshReg$(_c10, \"HiddenInput\");\n$RefreshReg$(_c11, \"Cursor\");\n$RefreshReg$(_c12, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","AppContainer","div","_c","Title","h1","_c2","TypingArea","_c3","TextContainer","_c4","BaseText","_c5","OverlayText","Char","span","props","status","_c6","ProgressBar","_c7","Progress","width","_c8","CompletionMessage","show","_c9","HiddenInput","input","_c10","Cursor","_c11","poems","title","content","isKorean","char","code","charCodeAt","isChoseong","CHOSEONG","decompose","jong","jung","cho","Math","floor","isPartialMatch","target","targetDecomp","isJungseong","length","inputDecomp","App","_s","userInput","setUserInput","completed","setCompleted","composing","setComposing","currentText","setCurrentText","debug","setDebug","event","data","currentPosition","setCurrentPosition","currentLine","setCurrentLine","inputRef","currentPoem","poemLines","split","calculateProgress","correctChars","filter","i","checkLineCompletion","current","focus","handleInput","e","_e$currentTarget","_e$currentTarget$sele","_e$currentTarget2","preventDefault","value","currentTarget","selectionStart","lineIndex","charCount","lines","lineLength","handleCompositionStart","handleCompositionUpdate","handleCompositionEnd","finalValue","cursorPos","handleKeyDown","key","isRemovingNewline","endsWith","newInput","slice","newCursorPos","textLines","currentLineIndex","originalLine","inputLine","newText","push","join","newPosition","renderOverlayLine","targetLine","inputContent","lineStartPos","result","targetChar","inputChar","globalCharPos","showCursor","style","position","children","fileName","_jsxFileName","lineNumber","columnNumber","progress","onClick","_inputRef$current","process","env","NODE_ENV","window","location","hostname","className","JSON","stringify","top","left","height","whiteSpace","map","idx","display","backgroundColor","marginLeft","animation","verticalAlign","ref","onChange","onCompositionStart","onCompositionUpdate","onCompositionEnd","onKeyDown","autoFocus","autoComplete","autoCorrect","spellCheck","_c12","$RefreshReg$"],"sources":["/Users/haeunkim/Desktop/project/typescript/SIRO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n  background-color: #2b2b2b;\n  min-height: 100vh;\n  color: #fff;\n`;\n\nconst Title = styled.h1`\n  color: #fff;\n  margin-bottom: 2rem;\n`;\n\nconst TypingArea = styled.div`\n  margin-bottom: 2rem;\n  position: relative;\n  text-align: left;\n`;\n\nconst TextContainer = styled.div`\n  position: relative;\n  font-size: 1.2rem;\n  line-height: 1.8;\n  font-family: monospace;\n`;\n\nconst BaseText = styled.div`\n  white-space: pre-wrap;\n  color: #666;\n  position: relative;\n  z-index: 1;\n  min-height: 200px;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\n\nconst OverlayText = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  white-space: pre-wrap;\n  z-index: 2;\n  width: 100%;\n  font-family: monospace;\n  line-height: 1.8em;\n`;\n\nconst Char = styled.span<{ status: 'correct' | 'incorrect' | 'waiting' }>`\n  color: ${props => {\n    switch (props.status) {\n      case 'correct': return '#fff';\n      case 'incorrect': return '#ff4444';\n      case 'waiting': return '#666';\n    }\n  }};\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 4px;\n  background-color: #444;\n  margin-bottom: 1rem;\n  border-radius: 2px;\n`;\n\nconst Progress = styled.div<{ width: number }>`\n  width: ${props => props.width}%;\n  height: 100%;\n  background-color: ${props => props.width === 100 ? '#4CAF50' : '#666'};\n  border-radius: 2px;\n  transition: width 0.3s ease;\n`;\n\nconst CompletionMessage = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(0, 0, 0, 0.9);\n  padding: 2rem;\n  border-radius: 8px;\n  display: ${props => props.show ? 'block' : 'none'};\n  z-index: 100;\n  text-align: center;\n`;\n\nconst HiddenInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  pointer-events: auto;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  cursor: text;\n`;\n\nconst Cursor = styled.span`\n  display: inline-block;\n  width: 2px;\n  height: 1.4em;\n  background-color: #fff;\n  margin-left: -1px;\n  margin-right: 1px;\n  vertical-align: middle;\n  animation: blink 1s step-end infinite;\n  position: relative;\n  \n  @keyframes blink {\n    from, to {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0;\n    }\n  }\n`;\n\nconst poems = [\n  {\n    title: '대화',\n    content: `사랑을 잃고 나는 쓰네\n잘 있거라, 짧았던 밤들아\n창밖을 떠돌던 겨울 안개들아\n아무것도 모르던 촛불들아, 잘 있거라\n공포를 기다리던 흰 종이들아\n말설임을 대신하던 눈물들아\n잘 있거라, 더 이상 내 것이 아닌 열망들아\n장님처럼 나 이제 더듬거리며 문을 잠그네\n가엾은 내 사랑 빈집에 갇혔네`,\n  }\n];\n\n// 한글 유니코드 범위 체크\nconst isKorean = (char: string) => {\n  const code = char.charCodeAt(0);\n  return code >= 0xAC00 && code <= 0xD7A3;\n};\n\n// 초성 검사\nconst isChoseong = (char: string) => {\n  const code = char.charCodeAt(0);\n  return code >= 0x3131 && code <= 0x314E;\n};\n\n// 초성 테이블\nconst CHOSEONG = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n// 한글 자모 분리\nconst decompose = (char: string) => {\n  const code = char.charCodeAt(0) - 0xAC00;\n  if (code < 0 || code > 11171) return null;\n\n  const jong = code % 28;\n  const jung = ((code - jong) / 28) % 21;\n  const cho = ((code - jong) / 28 - jung) / 21;\n\n  return {\n    cho: Math.floor(cho),\n    jung: Math.floor(jung),\n    jong: Math.floor(jong)\n  };\n};\n\n// 현재 입력이 목표의 일부인지 확인 (로직 개선)\nconst isPartialMatch = (target: string, input: string) => {\n  // 한글이 아니면 정확히 일치해야 함\n  if (!isKorean(target)) return target === input;\n  \n  // 완전히 일치하는 경우\n  if (target === input) return true;\n\n  // 초성만 입력된 경우 (예: 목표가 '사', 입력이 'ㅅ')\n  if (isChoseong(input)) {\n    const targetDecomp = decompose(target);\n    if (targetDecomp) {\n      return CHOSEONG[targetDecomp.cho] === input;\n    }\n  }\n  \n  // 중성만 입력된 경우 (중성 검사 함수 직접 사용)\n  const isJungseong = (char: string) => {\n    const code = char.charCodeAt(0);\n    return code >= 0x314F && code <= 0x3163;\n  };\n  \n  if (isJungseong(input)) {\n    return false; // 중성만 있는 경우는 일치하지 않음\n  }\n  \n  // 종성까지 입력된 경우 (예: 목표가 '라', 입력이 '랄')\n  if (input.length === 1 && isKorean(input)) {\n    const inputDecomp = decompose(input);\n    const targetDecomp = decompose(target);\n    \n    if (inputDecomp && targetDecomp) {\n      // 초성과 중성이 일치하면 부분 일치로 간주\n      return inputDecomp.cho === targetDecomp.cho && \n             inputDecomp.jung === targetDecomp.jung;\n    }\n  }\n  \n  return false;\n};\n\nconst App: React.FC = () => {\n  const [userInput, setUserInput] = useState('');\n  const [completed, setCompleted] = useState(false);\n  const [composing, setComposing] = useState(false);\n  const [currentText, setCurrentText] = useState('');\n  const [debug, setDebug] = useState({ event: '', data: '' });\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [currentLine, setCurrentLine] = useState(0);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const currentPoem = poems[0];\n  \n  // 시를 줄 단위로 분할\n  const poemLines = currentPoem.content.split('\\n');\n  \n  const calculateProgress = () => {\n    if (userInput.length === 0) return 0;\n    const correctChars = userInput.split('').filter((char, i) => char === currentPoem.content[i]).length;\n    return (correctChars / currentPoem.content.length) * 100;\n  };\n\n  // 현재 줄이 완성되었는지 확인하는 함수 (자동 줄바꿈 비활성화)\n  const checkLineCompletion = () => {\n    // 자동 줄바꿈 비활성화\n    return;\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  // useEffect 의존성 배열 수정\n  useEffect(() => {\n    // 조합 중일 때는 체크하지 않음\n    if (!composing) {\n      checkLineCompletion();\n    }\n  }, [userInput, composing, currentLine, poemLines]); // checkLineCompletion 제거\n\n  // 입력 처리 함수 (현재 줄 업데이트 포함)\n  const handleInput = (e: React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    const value = e.currentTarget?.value || '';\n    const selectionStart = e.currentTarget?.selectionStart ?? 0;\n\n    // 입력 시 현재 줄 계산\n    let lineIndex = 0;\n    let charCount = 0;\n    const lines = value.split('\\n');\n    \n    for (let i = 0; i < lines.length; i++) {\n      const lineLength = lines[i].length;\n      if (selectionStart >= charCount && selectionStart <= charCount + lineLength) {\n        lineIndex = i;\n        break;\n      }\n      charCount += lineLength + 1; // +1 for newline\n    }\n    \n    setDebug({\n      event: 'input',\n      data: value + ' / cursor: ' + selectionStart + ' / composing: ' + composing + ' / line: ' + lineIndex\n    });\n    \n    // 조합 중에는 현재 텍스트만 업데이트하고 커서 위치 유지\n    if (composing) {\n      setCurrentText(value);\n      return;\n    }\n    \n    setCurrentText(value);\n    setUserInput(value);\n    setCurrentPosition(selectionStart);\n    setCurrentLine(lineIndex);\n    \n    // 타이핑 완료 체크\n    if (value === currentPoem.content) {\n      setCompleted(true);\n    }\n  };\n\n  // IME 조합이 시작될 때 호출됩니다\n  const handleCompositionStart = (e: React.CompositionEvent<HTMLInputElement>) => {\n    setComposing(true);\n    setDebug({ \n      event: 'composition start', \n      data: e.data || '' + ' / value: ' + e.currentTarget.value \n    });\n  };\n\n  // IME 조합이 진행 중일 때 호출됩니다\n  const handleCompositionUpdate = (e: React.CompositionEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n    setCurrentText(value);\n    setDebug({ \n      event: 'composition update', \n      data: e.data || '' + ' / value: ' + value\n    });\n  };\n\n  // IME 조합이 완료될 때 호출됩니다\n  const handleCompositionEnd = (e: React.CompositionEvent<HTMLInputElement>) => {\n    const finalValue = e.currentTarget.value;\n    setComposing(false);\n    setCurrentText(finalValue);\n    setUserInput(finalValue);\n    \n    // 커서 위치 설정 - 선택 위치 사용\n    const cursorPos = e.currentTarget.selectionStart || finalValue.length;\n    setCurrentPosition(cursorPos);\n    \n    setDebug({ \n      event: 'composition end', \n      data: e.data || '' + ' / value: ' + finalValue + ' / cursor: ' + cursorPos\n    });\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    // 백스페이스 처리\n    if (e.key === 'Backspace' && !composing) {\n      e.preventDefault();\n      \n      // 마지막 문자가 줄바꿈인지 확인\n      const isRemovingNewline = currentText.endsWith('\\n');\n      \n      const newInput = currentText.slice(0, -1);\n      setCurrentText(newInput);\n      setUserInput(newInput);\n      \n      // 삭제 후 커서 위치 업데이트\n      const newCursorPos = newInput.length;\n      setCurrentPosition(newCursorPos);\n      \n      // 줄바꿈을 삭제한 경우 현재 줄 번호 업데이트\n      if (isRemovingNewline && currentLine > 0) {\n        setCurrentLine(currentLine - 1);\n      } else {\n        // 일반 문자 삭제 후 현재 줄 계산\n        const lines = newInput.split('\\n');\n        let lineIndex = 0;\n        let charCount = 0;\n        \n        for (let i = 0; i < lines.length; i++) {\n          const lineLength = lines[i].length;\n          if (newCursorPos >= charCount && newCursorPos <= charCount + lineLength) {\n            lineIndex = i;\n            break;\n          }\n          charCount += lineLength + 1;\n        }\n        \n        setCurrentLine(lineIndex);\n      }\n    }\n    \n    // Enter 키 처리\n    if (e.key === 'Enter' && !composing) {\n      e.preventDefault();\n      \n      // 현재 텍스트를 줄 단위로 분리\n      const textLines = currentText.split('\\n');\n      \n      // 현재 커서가 어느 줄에 있는지 확인\n      let currentLineIndex = 0;\n      let charCount = 0;\n      \n      for (let i = 0; i < textLines.length; i++) {\n        const lineLength = textLines[i].length;\n        if (currentPosition >= charCount && currentPosition <= charCount + lineLength) {\n          currentLineIndex = i;\n          break;\n        }\n        // +1은 줄바꿈 문자\n        charCount += lineLength + 1;\n      }\n      \n      // 현재 줄이 원본 시의 해당 줄과 일치하는지 확인\n      if (currentLineIndex < poemLines.length) {\n        const originalLine = poemLines[currentLineIndex];\n        const inputLine = textLines[currentLineIndex];\n        \n        // 현재 줄을 모두 입력했고 원본과 일치하는지 확인\n        if (inputLine === originalLine) {\n          // 다음 줄로 넘어갈 수 있는 경우\n          if (currentLineIndex < poemLines.length - 1) {\n            // 줄바꿈 추가\n            const newText = [...textLines];\n            // 빈 줄 추가 (다음 줄이 존재하지 않는 경우)\n            if (newText.length <= currentLineIndex + 1) {\n              newText.push('');\n            }\n            \n            const newInput = newText.join('\\n');\n            \n            setCurrentText(newInput);\n            setUserInput(newInput);\n            setCurrentLine(currentLineIndex + 1); // 현재 줄 업데이트\n            \n            // 다음 줄 첫 글자 위치로 커서 이동\n            let newPosition = 0;\n            for (let i = 0; i <= currentLineIndex; i++) {\n              newPosition += newText[i].length;\n              if (i < newText.length - 1) {\n                newPosition += 1; // 줄바꿈 문자 길이\n              }\n            }\n            setCurrentPosition(newPosition);\n          }\n        }\n      }\n    }\n  };\n\n  // 줄바꿈 처리를 위한 함수 추가\n  const renderOverlayLine = (targetLine: string, lineIndex: number) => {\n    // 현재 텍스트를 줄 단위로 분리\n    const textLines = currentText.split('\\n');\n    // 현재 줄에 해당하는 텍스트 (해당 줄 인덱스가 없으면 빈 문자열)\n    const inputContent = lineIndex < textLines.length ? textLines[lineIndex] : '';\n    \n    // 현재 줄의 시작 위치 계산 (전체 텍스트에서의 절대 위치)\n    let lineStartPos = 0;\n    for (let i = 0; i < lineIndex; i++) {\n      lineStartPos += poemLines[i].length + 1; // +1 for newline\n    }\n\n    // 줄 내 문자 단위 처리\n    const result: JSX.Element[] = [];\n    for (let i = 0; i < targetLine.length; i++) {\n      const targetChar = targetLine[i];\n      const inputChar = i < inputContent.length ? inputContent[i] : '';\n      const globalCharPos = lineStartPos + i; // 전체 텍스트에서의 위치\n      const showCursor = globalCharPos === currentPosition;\n\n      if (i < inputContent.length) {\n        // 입력된 글자 처리\n        const status = isPartialMatch(targetChar, inputChar) ? 'correct' : 'incorrect';\n        result.push(\n          <span key={i} style={{ position: 'relative' }}>\n            <Char status={status}>{inputChar}</Char>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      } else {\n        // 입력되지 않은 글자는 커서만 표시\n        result.push(\n          <span key={i} style={{ position: 'relative' }}>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      }\n    }\n\n    // 초과 입력된 글자들 처리 (정확히 그 줄에 대해서만)\n    if (inputContent.length > targetLine.length) {\n      for (let i = targetLine.length; i < inputContent.length; i++) {\n        const globalCharPos = lineStartPos + i;\n        const showCursor = globalCharPos === currentPosition;\n        result.push(\n          <span key={`excess-${i}`} style={{ position: 'relative' }}>\n            <Char status=\"incorrect\">{inputContent[i]}</Char>\n            {showCursor && <Cursor />}\n          </span>\n        );\n      }\n    }\n\n    return result;\n  };\n\n  const progress = calculateProgress();\n\n  // 초기화 시 커서 위치를 0으로 설정\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n      setCurrentPosition(0);\n    }\n  }, []); // 의존성 배열 비워둠\n\n  useEffect(() => {\n    checkLineCompletion();\n  }, [currentLine, currentText, checkLineCompletion]);\n\n  // 렌더링 부분 수정 - 커서 하나만 표시하도록 변경\n  return (\n    <AppContainer onClick={() => inputRef.current?.focus()}>\n      <Title>시 타이핑 연습</Title>\n      {/* 디버그 정보 표시 (개발 모드에서만) */}\n      {(process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost') && (\n        <div className=\"debug\">\n          <h3>디버그 정보:</h3>\n          <pre>{JSON.stringify(debug, null, 2)}</pre>\n        </div>\n      )}\n      <ProgressBar>\n        <Progress width={progress} />\n      </ProgressBar>\n      <TypingArea>\n        <TextContainer>\n          {/* 시 내용 표시 */}\n          <BaseText>{currentPoem.content}</BaseText>\n          \n          {/* 입력 내용 오버레이 */}\n          <div style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n            {/* 사용자 입력 */}\n            <div style={{ position: 'relative', whiteSpace: 'pre-wrap' }}>\n              {currentText.split('').map((char, idx) => {\n                // 원본 텍스트와 비교\n                const targetChar = idx < currentPoem.content.length ? currentPoem.content[idx] : '';\n                const status = isPartialMatch(targetChar, char) ? 'correct' : 'incorrect';\n                \n                // 커서 표시 여부\n                const showCursor = idx === currentPosition - 1;\n                \n                return (\n                  <span key={idx} style={{ position: 'relative' }}>\n                    <Char status={status}>{char}</Char>\n                    {showCursor && <span style={{ \n                      display: 'inline-block', \n                      width: '2px', \n                      height: '1.4em', \n                      backgroundColor: '#fff',\n                      marginLeft: '1px',\n                      animation: 'blink 1s step-end infinite',\n                      verticalAlign: 'middle'\n                    }}></span>}\n                  </span>\n                );\n              })}\n              \n              {/* 입력 위치가 텍스트 끝일 경우 커서 표시 */}\n              {currentPosition === currentText.length && (\n                <span style={{ \n                  display: 'inline-block', \n                  width: '2px', \n                  height: '1.4em', \n                  backgroundColor: '#fff',\n                  animation: 'blink 1s step-end infinite',\n                  verticalAlign: 'middle'\n                }}></span>\n              )}\n            </div>\n          </div>\n          \n          <HiddenInput\n            ref={inputRef}\n            value={currentText}\n            onChange={handleInput}\n            onCompositionStart={handleCompositionStart}\n            onCompositionUpdate={handleCompositionUpdate}\n            onCompositionEnd={handleCompositionEnd}\n            onKeyDown={handleKeyDown}\n            autoFocus\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            spellCheck={false}\n            aria-label=\"시 입력 필드\"\n          />\n        </TextContainer>\n      </TypingArea>\n      <CompletionMessage show={completed}>\n        <h2>🎉 축하합니다! 🎉</h2>\n        <p>성공적으로 시를 완성하셨습니다!</p>\n      </CompletionMessage>\n    </AppContainer>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
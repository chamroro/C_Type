[{"/Users/haeunkim/Desktop/project/typescript/SIRO/src/index.tsx":"1","/Users/haeunkim/Desktop/project/typescript/SIRO/src/App.tsx":"2","/Users/haeunkim/Desktop/project/typescript/SIRO/src/data/poems.ts":"3","/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Auth/Login.tsx":"4","/Users/haeunkim/Desktop/project/typescript/SIRO/src/contexts/AuthContext.tsx":"5","/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Auth/Signup.tsx":"6","/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Navigation.tsx":"7","/Users/haeunkim/Desktop/project/typescript/SIRO/src/firebase/auth.ts":"8","/Users/haeunkim/Desktop/project/typescript/SIRO/src/firebase/config.ts":"9","/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/PoetryTyping.tsx":"10","/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/NicknameModal.tsx":"11","/Users/haeunkim/Desktop/project/typescript/SIRO/src/firebase/poems.ts":"12","/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Admin/AdminPoems.tsx":"13"},{"size":219,"mtime":1744687415415,"results":"14","hashOfConfig":"15"},{"size":10210,"mtime":1744723585387,"results":"16","hashOfConfig":"15"},{"size":11881,"mtime":1744722500304,"results":"17","hashOfConfig":"15"},{"size":5304,"mtime":1744722500282,"results":"18","hashOfConfig":"15"},{"size":9314,"mtime":1744722500282,"results":"19","hashOfConfig":"15"},{"size":3782,"mtime":1744722500282,"results":"20","hashOfConfig":"15"},{"size":8191,"mtime":1744723492249,"results":"21","hashOfConfig":"15"},{"size":8293,"mtime":1744719134499,"results":"22","hashOfConfig":"15"},{"size":1564,"mtime":1744722462335,"results":"23","hashOfConfig":"15"},{"size":30477,"mtime":1744724022030,"results":"24","hashOfConfig":"15"},{"size":3841,"mtime":1744706753769,"results":"25","hashOfConfig":"15"},{"size":5365,"mtime":1744722500282,"results":"26","hashOfConfig":"15"},{"size":17545,"mtime":1744722500311,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yfz21h",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"/Users/haeunkim/Desktop/project/typescript/SIRO/src/index.tsx",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/App.tsx",["56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77"],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/data/poems.ts",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Auth/Login.tsx",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/contexts/AuthContext.tsx",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Auth/Signup.tsx",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Navigation.tsx",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/firebase/auth.ts",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/firebase/config.ts",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/PoetryTyping.tsx",["78","79","80","81","82","83","84","85","86","87","88"],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/NicknameModal.tsx",[],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/firebase/poems.ts",["89","90","91","92","93","94","95"],"/Users/haeunkim/Desktop/project/typescript/SIRO/src/components/Admin/AdminPoems.tsx",["96","97"],"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { \n  collection, \n  addDoc, \n  getDocs, \n  updateDoc, \n  deleteDoc, \n  doc, \n  query, \n  orderBy,\n  where,\n  setDoc\n} from 'firebase/firestore';\nimport { db } from '../../firebase/config';\n\n// 관리자 아이디 목록 (임시로 이 방식 사용, 실제로는 Firestore에 권한 정보를 저장하는 것이 좋음)\nconst ADMIN_IDS = ['O8rZTec7RnX3jDBkR7NMuW7gEF93']; // 관리자 권한을 부여할 사용자 UID 입력\n\n// 시 인터페이스\ninterface Poem {\n  id?: string;\n  title: string;\n  content: string;\n  author: string;\n  completedUsers?: string[];\n}\n\n// 스타일 컴포넌트\nconst Container = styled.div`\n  max-width: 800px;\n  margin: 2rem auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n`;\n\nconst Title = styled.h1`\n  font-size: 1.8rem;\n  color: #333;\n  margin: 0;\n`;\n\nconst Button = styled.button`\n  padding: 0.5rem 1rem;\n  background-color: #4a90e2;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #357ABD;\n  }\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst DangerButton = styled(Button)`\n  background-color: #e74c3c;\n  \n  &:hover {\n    background-color: #c0392b;\n  }\n`;\n\nconst Form = styled.form`\n  margin-bottom: 2rem;\n  padding: 1.5rem;\n  border: 1px solid #eee;\n  border-radius: 8px;\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #555;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  min-height: 150px;\n  resize: vertical;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 1rem;\n`;\n\nconst Th = styled.th`\n  text-align: left;\n  padding: 1rem;\n  border-bottom: 2px solid #eee;\n  color: #555;\n`;\n\nconst Td = styled.td`\n  padding: 1rem;\n  border-bottom: 1px solid #eee;\n  vertical-align: top;\n`;\n\nconst ContentPreview = styled.div`\n  max-height: 100px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: pre-wrap;\n  color: #666;\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  gap: 0.5rem;\n`;\n\nconst ErrorMessage = styled.div`\n  color: #e74c3c;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  background-color: #fadbd8;\n  border-radius: 4px;\n`;\n\nconst SuccessMessage = styled.div`\n  color: #27ae60;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  background-color: #d4efdf;\n  border-radius: 4px;\n`;\n\nconst Modal = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 100;\n`;\n\nconst ModalContent = styled.div`\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  width: 90%;\n  max-width: 600px;\n  max-height: 90vh;\n  overflow-y: auto;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n`;\n\nconst ModalTitle = styled.h2`\n  margin: 0;\n  color: #333;\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  color: #999;\n  \n  &:hover {\n    color: #333;\n  }\n`;\n\nconst CompletedUsersList = styled.div`\n  margin-top: 1rem;\n`;\n\nconst UserChip = styled.span`\n  display: inline-block;\n  padding: 0.3rem 0.6rem;\n  margin: 0.2rem;\n  background-color: #e6f2ff;\n  color: #4a90e2;\n  border: 1px solid #4a90e2;\n  border-radius: 16px;\n  font-size: 0.8rem;\n`;\n\nconst NoAccessMessage = styled.div`\n  text-align: center;\n  margin-top: 5rem;\n  color: #e74c3c;\n  font-size: 1.2rem;\n`;\n\nconst AdminPoems: React.FC = () => {\n  const { currentUser } = useAuth();\n  const [poems, setPoems] = useState<Poem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  // 시 추가/편집을 위한 상태\n  const [showForm, setShowForm] = useState(false);\n  const [editingPoem, setEditingPoem] = useState<Poem | null>(null);\n  const [formData, setFormData] = useState<Poem>({\n    id: '',\n    title: '',\n    content: '',\n    author: '',\n    completedUsers: []\n  });\n  \n  // 완료한 사용자 목록 모달\n  const [showCompletedUsers, setShowCompletedUsers] = useState(false);\n  const [selectedPoemUsers, setSelectedPoemUsers] = useState<{id: string, users: string[]}>({id: '', users: []});\n  \n  // 사용자 닉네임 캐시\n  const [userNicknames, setUserNicknames] = useState<{[key: string]: string}>({});\n  \n  // 관리자 권한 확인\n  const isAdmin = currentUser && ADMIN_IDS.includes(currentUser.uid);\n  \n  // 시 목록 가져오기\n  const fetchPoems = async () => {\n    try {\n      setLoading(true);\n      const poemsQuery = query(collection(db, 'poems'), orderBy('title'));\n      const poemSnapshot = await getDocs(poemsQuery);\n      \n      const poemsList: Poem[] = poemSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data() as Poem\n      }));\n      \n      setPoems(poemsList);\n    } catch (error) {\n      console.error('시 목록 가져오기 오류:', error);\n      setError('시 목록을 불러오는 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // 사용자 닉네임 가져오기\n  const fetchUserNicknames = async (userIds: string[]) => {\n    const newNicknames: {[key: string]: string} = {...userNicknames};\n    const idsToFetch = userIds.filter(id => !newNicknames[id]);\n    \n    if (idsToFetch.length === 0) return;\n    \n    try {\n      for (const userId of idsToFetch) {\n        const userQuery = query(collection(db, 'users'), where('uid', '==', userId));\n        const userDocs = await getDocs(userQuery);\n        \n        if (!userDocs.empty) {\n          const userData = userDocs.docs[0].data();\n          newNicknames[userId] = userData.nickname || userData.displayName || '사용자';\n        } else {\n          newNicknames[userId] = '사용자';\n        }\n      }\n      \n      setUserNicknames(newNicknames);\n    } catch (error) {\n      console.error('사용자 닉네임 가져오기 오류:', error);\n    }\n  };\n  \n  // 초기 데이터 로딩\n  useEffect(() => {\n    if (!isAdmin) return;\n    fetchPoems();\n  }, [isAdmin]);\n  \n  // 폼 입력 변경 처리\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  // 시 추가 폼 초기화\n  const initAddForm = () => {\n    setFormData({\n      id: '',\n      title: '',\n      content: '',\n      author: '',\n      completedUsers: []\n    });\n    setEditingPoem(null);\n    setShowForm(true);\n    setError(null);\n    setSuccess(null);\n  };\n  \n  // 시 편집 폼 초기화\n  const initEditForm = (poem: Poem) => {\n    setFormData({\n      ...poem\n    });\n    setEditingPoem(poem);\n    setShowForm(true);\n    setError(null);\n    setSuccess(null);\n  };\n  \n  // 폼 제출 처리\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    setSuccess(null);\n\n    try {\n      if (editingPoem && editingPoem.id) {\n        // 시 수정\n        await updateDoc(doc(db, 'poems', editingPoem.id), {\n          title: formData.title,\n          content: formData.content,\n          author: formData.author\n        });\n        setSuccess('시가 성공적으로 수정되었습니다.');\n      } else {\n        // 현재 가장 큰 ID 값 찾기\n        const poemsQuery = query(collection(db, 'poems'));\n        const poemSnapshot = await getDocs(poemsQuery);\n        let maxId = 0;\n        \n        poemSnapshot.docs.forEach(doc => {\n          const numericId = parseInt(doc.id);\n          if (!isNaN(numericId) && numericId > maxId) {\n            maxId = numericId;\n          }\n        });\n\n        // 새로운 ID 생성 (최대값 + 1)\n        const newId = (maxId + 1).toString();\n\n        // 새 시 추가\n        await setDoc(doc(db, 'poems', newId), {\n          title: formData.title,\n          content: formData.content,\n          author: formData.author,\n          completedUsers: []\n        });\n        setSuccess('새로운 시가 성공적으로 추가되었습니다.');\n      }\n\n      // 폼 초기화\n      setShowForm(false);\n      setFormData({\n        id: '',\n        title: '',\n        content: '',\n        author: '',\n        completedUsers: []\n      });\n      setEditingPoem(null);\n\n      // 시 목록 새로고침\n      fetchPoems();\n    } catch (err) {\n      console.error('Error:', err);\n      setError('시를 저장하는 중 오류가 발생했습니다.');\n    }\n  };\n  \n  // 시 삭제 처리\n  const handleDelete = async (poemId: string) => {\n    if (!window.confirm('정말로 이 시를 삭제하시겠습니까?')) {\n      return;\n    }\n    \n    try {\n      await deleteDoc(doc(db, 'poems', poemId));\n      setSuccess('시가 성공적으로 삭제되었습니다.');\n      fetchPoems();\n    } catch (error) {\n      console.error('시 삭제 오류:', error);\n      setError('시를 삭제하는 중 오류가 발생했습니다.');\n    }\n  };\n  \n  // 완료한 사용자 목록 모달 표시\n  const showCompletedUsersModal = (poem: Poem) => {\n    if (poem.id && poem.completedUsers && poem.completedUsers.length > 0) {\n      setSelectedPoemUsers({\n        id: poem.id,\n        users: poem.completedUsers\n      });\n      fetchUserNicknames(poem.completedUsers);\n      setShowCompletedUsers(true);\n    }\n  };\n  \n  // 시 자동 업로드 (로컬 poems.ts 파일에서 Firestore로)\n  const handleUploadLocalPoems = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccess(null);\n      console.log('로컬 시 업로드 시작...');\n      \n      // poems 모듈 동적 import\n      const poemsModule = await import('../../data/poems');\n      const localPoems = poemsModule.default;\n      console.log(`로컬에서 ${localPoems.length}개의 시를 불러왔습니다.`);\n      \n      // 기존 데이터 모두 삭제\n      const poemsCollection = collection(db, 'poems');\n      const snapshot = await getDocs(poemsCollection);\n      console.log(`파이어스토어에서 삭제할 시: ${snapshot.docs.length}개`);\n      \n      const deletePromises = snapshot.docs.map(doc => {\n        console.log(`시 삭제 중: ${doc.id} - ${doc.data().title}`);\n        return deleteDoc(doc.ref);\n      });\n      await Promise.all(deletePromises);\n      console.log('기존 시 데이터 삭제 완료');\n      \n      // 로컬 시 데이터 추가\n      console.log('새 시 데이터 업로드 시작...');\n      const uploadPromises = localPoems.map(poem => {\n        const poemData = {\n          title: poem.title,\n          content: poem.content,\n          author: poem.author,\n          id: poem.id || doc(collection(db, 'poems')).id, // id가 없는 경우 자동 생성\n          completedUsers: poem.completedUsers || []\n        };\n        \n        const poemRef = poem.id \n          ? doc(db, 'poems', poem.id) \n          : doc(collection(db, 'poems'));\n          \n        console.log(`시 업로드 중: ${poemData.id} - ${poemData.title}`);\n        return setDoc(poemRef, poemData);\n      });\n      \n      await Promise.all(uploadPromises);\n      console.log('모든 시 업로드 완료!');\n      \n      setSuccess(`${localPoems.length}개의 시가 성공적으로 업로드되었습니다.`);\n      setLoading(false);\n      fetchPoems();\n    } catch (error: unknown) {\n      console.error('로컬 시 업로드 오류:', error);\n      let errorMessage = '로컬 시를 업로드하는 중 오류가 발생했습니다';\n      \n      if (error instanceof Error) {\n        errorMessage += `: ${error.message}`;\n      }\n      \n      setError(errorMessage);\n      setLoading(false);\n    }\n  };\n  \n  if (!isAdmin) {\n    return (\n      <Container>\n        <NoAccessMessage>\n          <h2>접근 권한이 없습니다</h2>\n          <p>이 페이지는 관리자만 접근할 수 있습니다.</p>\n        </NoAccessMessage>\n      </Container>\n    );\n  }\n  \n  return (\n    <Container>\n      <Header>\n        <Title>시 관리</Title>\n        <div>\n          <Button onClick={handleUploadLocalPoems} style={{ marginRight: '10px' }}>\n            로컬 시 업로드\n          </Button>\n          <Button onClick={initAddForm}>새 시 추가</Button>\n        </div>\n      </Header>\n      \n      {error && <ErrorMessage>{error}</ErrorMessage>}\n      {success && <SuccessMessage>{success}</SuccessMessage>}\n      \n      {showForm && (\n        <Form onSubmit={handleSubmit}>\n          <h2>{editingPoem ? '시 편집' : '새 시 추가'}</h2>\n          \n          <FormGroup>\n            <Label htmlFor=\"title\">제목</Label>\n            <Input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleInputChange}\n              required\n            />\n          </FormGroup>\n          \n          <FormGroup>\n            <Label htmlFor=\"author\">작가</Label>\n            <Input\n              type=\"text\"\n              id=\"author\"\n              name=\"author\"\n              value={formData.author}\n              onChange={handleInputChange}\n              required\n            />\n          </FormGroup>\n          \n          <FormGroup>\n            <Label htmlFor=\"content\">내용</Label>\n            <Textarea\n              id=\"content\"\n              name=\"content\"\n              value={formData.content}\n              onChange={handleInputChange}\n              required\n            />\n          </FormGroup>\n          \n          <div>\n            <Button type=\"submit\">저장</Button>\n            <Button \n              type=\"button\" \n              onClick={() => setShowForm(false)} \n              style={{ marginLeft: '10px', backgroundColor: '#999' }}\n            >\n              취소\n            </Button>\n          </div>\n        </Form>\n      )}\n      \n      {loading ? (\n        <p>시 목록을 불러오는 중...</p>\n      ) : (\n        <Table>\n          <thead>\n            <tr>\n              <Th>제목</Th>\n              <Th>작가</Th>\n              <Th>내용</Th>\n              <Th>완료한 사용자</Th>\n              <Th>작업</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {poems.length === 0 ? (\n              <tr>\n                <Td colSpan={6}>시 목록이 비어있습니다.</Td>\n              </tr>\n            ) : (\n              poems.map(poem => (\n                <tr key={poem.id}>\n                  <Td>{poem.title}</Td>\n                  <Td>{poem.author}</Td>\n                  <Td>\n                    <ContentPreview>\n                      {poem.content.length > 100 \n                        ? `${poem.content.substring(0, 100)}...` \n                        : poem.content}\n                    </ContentPreview>\n                  </Td>\n                 \n                  <Td>\n                    {poem.completedUsers?.length || 0}명\n                    {poem.completedUsers && poem.completedUsers.length > 0 && (\n                      <Button \n                        onClick={() => showCompletedUsersModal(poem)}\n                        style={{ fontSize: '0.8rem', padding: '0.2rem 0.5rem', marginLeft: '5px' }}\n                      >\n                        보기\n                      </Button>\n                    )}\n                  </Td>\n                  <Td>\n                    <Actions>\n                      <Button onClick={() => initEditForm(poem)}>편집</Button>\n                      <DangerButton onClick={() => poem.id && handleDelete(poem.id)}>삭제</DangerButton>\n                    </Actions>\n                  </Td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </Table>\n      )}\n      \n      {/* 완료한 사용자 목록 모달 */}\n      {showCompletedUsers && (\n        <Modal>\n          <ModalContent>\n            <ModalHeader>\n              <ModalTitle>완료한 사용자 목록</ModalTitle>\n              <CloseButton onClick={() => setShowCompletedUsers(false)}>×</CloseButton>\n            </ModalHeader>\n            \n            <p>\n              <strong>시 ID:</strong> {selectedPoemUsers.id}\n            </p>\n            \n            <CompletedUsersList>\n              <p><strong>타이핑 완료한 사용자 ({selectedPoemUsers.users.length}명):</strong></p>\n              {selectedPoemUsers.users.map((userId, index) => (\n                <UserChip key={index}>\n                  {userNicknames[userId] || '사용자'} ({userId.substring(0, 6)}...)\n                </UserChip>\n              ))}\n            </CompletedUsersList>\n          </ModalContent>\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default AdminPoems; ",["98","99"],{"ruleId":"100","severity":1,"message":"101","line":1,"column":38,"nodeType":"102","messageId":"103","endLine":1,"endColumn":44},{"ruleId":"100","severity":1,"message":"104","line":1,"column":46,"nodeType":"102","messageId":"103","endLine":1,"endColumn":55},{"ruleId":"100","severity":1,"message":"105","line":1,"column":57,"nodeType":"102","messageId":"103","endLine":1,"endColumn":66},{"ruleId":"100","severity":1,"message":"106","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":13},{"ruleId":"100","severity":1,"message":"107","line":80,"column":7,"nodeType":"102","messageId":"103","endLine":80,"endColumn":12},{"ruleId":"100","severity":1,"message":"108","line":85,"column":7,"nodeType":"102","messageId":"103","endLine":85,"endColumn":28},{"ruleId":"100","severity":1,"message":"109","line":93,"column":7,"nodeType":"102","messageId":"103","endLine":93,"endColumn":15},{"ruleId":"100","severity":1,"message":"110","line":133,"column":7,"nodeType":"102","messageId":"103","endLine":133,"endColumn":20},{"ruleId":"100","severity":1,"message":"111","line":156,"column":7,"nodeType":"102","messageId":"103","endLine":156,"endColumn":15},{"ruleId":"100","severity":1,"message":"112","line":170,"column":7,"nodeType":"102","messageId":"103","endLine":170,"endColumn":17},{"ruleId":"100","severity":1,"message":"113","line":176,"column":7,"nodeType":"102","messageId":"103","endLine":176,"endColumn":20},{"ruleId":"100","severity":1,"message":"114","line":183,"column":7,"nodeType":"102","messageId":"103","endLine":183,"endColumn":20},{"ruleId":"100","severity":1,"message":"115","line":189,"column":7,"nodeType":"102","messageId":"103","endLine":189,"endColumn":15},{"ruleId":"100","severity":1,"message":"116","line":198,"column":7,"nodeType":"102","messageId":"103","endLine":198,"endColumn":16},{"ruleId":"100","severity":1,"message":"117","line":214,"column":7,"nodeType":"102","messageId":"103","endLine":214,"endColumn":18},{"ruleId":"100","severity":1,"message":"118","line":223,"column":7,"nodeType":"102","messageId":"103","endLine":223,"endColumn":11},{"ruleId":"100","severity":1,"message":"119","line":234,"column":7,"nodeType":"102","messageId":"103","endLine":234,"endColumn":18},{"ruleId":"100","severity":1,"message":"120","line":242,"column":7,"nodeType":"102","messageId":"103","endLine":242,"endColumn":15},{"ruleId":"100","severity":1,"message":"121","line":250,"column":7,"nodeType":"102","messageId":"103","endLine":250,"endColumn":24},{"ruleId":"100","severity":1,"message":"122","line":265,"column":7,"nodeType":"102","messageId":"103","endLine":265,"endColumn":18},{"ruleId":"100","severity":1,"message":"123","line":275,"column":7,"nodeType":"102","messageId":"103","endLine":275,"endColumn":18},{"ruleId":"100","severity":1,"message":"124","line":285,"column":10,"nodeType":"102","messageId":"103","endLine":285,"endColumn":21},{"ruleId":"100","severity":1,"message":"106","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":13},{"ruleId":"100","severity":1,"message":"125","line":4,"column":10,"nodeType":"102","messageId":"103","endLine":4,"endColumn":14},{"ruleId":"100","severity":1,"message":"126","line":6,"column":29,"nodeType":"102","messageId":"103","endLine":6,"endColumn":48},{"ruleId":"100","severity":1,"message":"127","line":8,"column":38,"nodeType":"102","messageId":"103","endLine":8,"endColumn":43},{"ruleId":"100","severity":1,"message":"123","line":313,"column":7,"nodeType":"102","messageId":"103","endLine":313,"endColumn":18},{"ruleId":"100","severity":1,"message":"128","line":320,"column":7,"nodeType":"102","messageId":"103","endLine":320,"endColumn":15},{"ruleId":"100","severity":1,"message":"129","line":334,"column":7,"nodeType":"102","messageId":"103","endLine":334,"endColumn":20},{"ruleId":"100","severity":1,"message":"130","line":502,"column":10,"nodeType":"102","messageId":"103","endLine":502,"endColumn":19},{"ruleId":"100","severity":1,"message":"131","line":502,"column":21,"nodeType":"102","messageId":"103","endLine":502,"endColumn":33},{"ruleId":"132","severity":1,"message":"133","line":538,"column":6,"nodeType":"134","endLine":538,"endColumn":13,"suggestions":"135"},{"ruleId":"132","severity":1,"message":"136","line":564,"column":6,"nodeType":"134","endLine":564,"endColumn":58,"suggestions":"137"},{"ruleId":"100","severity":1,"message":"138","line":6,"column":3,"nodeType":"102","messageId":"103","endLine":6,"endColumn":8},{"ruleId":"100","severity":1,"message":"127","line":7,"column":3,"nodeType":"102","messageId":"103","endLine":7,"endColumn":8},{"ruleId":"100","severity":1,"message":"139","line":8,"column":3,"nodeType":"102","messageId":"103","endLine":8,"endColumn":9},{"ruleId":"100","severity":1,"message":"140","line":9,"column":3,"nodeType":"102","messageId":"103","endLine":9,"endColumn":12},{"ruleId":"100","severity":1,"message":"141","line":10,"column":3,"nodeType":"102","messageId":"103","endLine":10,"endColumn":10},{"ruleId":"100","severity":1,"message":"142","line":11,"column":3,"nodeType":"102","messageId":"103","endLine":11,"endColumn":8},{"ruleId":"100","severity":1,"message":"143","line":14,"column":3,"nodeType":"102","messageId":"103","endLine":14,"endColumn":17},{"ruleId":"100","severity":1,"message":"139","line":6,"column":3,"nodeType":"102","messageId":"103","endLine":6,"endColumn":9},{"ruleId":"100","severity":1,"message":"144","line":117,"column":7,"nodeType":"102","messageId":"103","endLine":117,"endColumn":13},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'createRef' is defined but never used.","'RefObject' is defined but never used.","'poems' is defined but never used.","'Title' is assigned a value but never used.","'FontSelectorContainer' is assigned a value but never used.","'FontChip' is assigned a value but never used.","'RefreshButton' is assigned a value but never used.","'PoemInfo' is assigned a value but never used.","'TypingArea' is assigned a value but never used.","'TextContainer' is assigned a value but never used.","'LineContainer' is assigned a value but never used.","'BaseLine' is assigned a value but never used.","'InputLine' is assigned a value but never used.","'OverlayLine' is assigned a value but never used.","'Char' is assigned a value but never used.","'ProgressBar' is assigned a value but never used.","'Progress' is assigned a value but never used.","'CompletionMessage' is assigned a value but never used.","'fontOptions' is assigned a value but never used.","'RefreshIcon' is assigned a value but never used.","'poemsLoaded' is assigned a value but never used.","'auth' is defined but never used.","'getCompletedUserIds' is defined but never used.","'where' is defined but never used.","'isKorean' is assigned a value but never used.","'isKoreanVowel' is assigned a value but never used.","'userInput' is assigned a value but never used.","'setUserInput' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPoem' and 'loadNextPoem'. Either include them or remove the dependency array.","ArrayExpression",["149"],"React Hook useEffect has a missing dependency: 'handleCompletion'. Either include it or remove the dependency array.",["150"],"'query' is defined but never used.","'addDoc' is defined but never used.","'Timestamp' is defined but never used.","'orderBy' is defined but never used.","'limit' is defined but never used.","'FirestoreError' is defined but never used.","'Select' is assigned a value but never used.","no-native-reassign",["151"],"no-negated-in-lhs",["152"],{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [currentPoem, loadNextPoem, poems]",{"range":"157","text":"158"},"Update the dependencies array to be: [lineInputs, poemLines, currentPoem, showCompletion, handleCompletion]",{"range":"159","text":"160"},[14156,14163],"[currentPoem, loadNextPoem, poems]",[14929,14981],"[lineInputs, poemLines, currentPoem, showCompletion, handleCompletion]"]